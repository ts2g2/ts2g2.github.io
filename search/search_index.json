{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ts2g<sup>2</sup>","text":"<p>TS2G<sup>2</sup> stands for \"timeseries to graphs and back\". The library implements a variety of strategies to convert timeseries into graphs, and convert graphs into sequences. Below, we provide a code snippet to generate a graph from timeseries:</p> <pre><code># load time series from a file\ntimegraph = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n\n# and preprocess the timeseries with multiple preprocessing strategies\n.with_preprocessing(TimeseriesPreprocessingComposite()\\\n    .add(TimeseriesPreprocessingSegmentation(60, 120))\\\n    .add(TimeseriesPreprocessingSlidingWindow(5)))\\\n\n# then create a graph from the timeseries, following a particular strategy\n.to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().get_strategy())\\\n\n# link graphs that result from the same timeseries, but at different sliding window frames\n.link(LinkGraphs().sliding_window())\\\n\n# and combine identical graphs that result from the abovementioned time windows into single nodes\n.combine_identical_subgraphs()\\\n\n# finally, draw the graph\n.draw(\"blue\")\n</code></pre> <p>For a more detailed example, look at the Amazon stocks demo.</p> <p>Many of the methods implemented in this library are described in Silva, Vanessa Freitas, et al. \"Time series analysis via network science: Concepts and algorithms.\" Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery 11.3 (2021): e1404. Nevertheless, the library also includes additional techniques found in other works from the scientific literature.</p> <p>This package is being developed as part of the Graph-Massivizer project.  The package is a joint effort between the Jo\u017eef Stefan Institute, the University of Twente, the Vrije Universiteit Amsterdam, the University of Klagenfurt, the University of Bologna, and Peracton.</p>"},{"location":"#timeseries-to-graph-conversion","title":"Timeseries to graph conversion","text":""},{"location":"#implemented-features","title":"Implemented features","text":"# Visibility Graph Graph type Constraints Undirected Directed Weighted Penetration Angle 1 Natural Visibility Graph X X X X X 2 Horizontal Visibility Graph X X X X X 3 Difference Visibility Graph 4 Quantile Graph X X 5 Ordinal Partition Graph X X"},{"location":"#references-table","title":"References table","text":"# Visibility Graph Graph type Constraints Undirected Directed Weighted Penetration Angle 1 Natural Visibility Graph ref ref ref ref,        ref 2 Horizontal Visibility Graph ref ref ref ref,        ref 3 Difference Visibility Graph 4 Quantile Graph ref 5 Ordinal Partition Graph"},{"location":"#graphs-to-timeseries-conversion","title":"Graphs to timeseries conversion","text":"<p>Graphs are converted back to timeseries by sampling node values from the graph following different strategies. Below, we provide a short snippet of code, to illustrate how this can be done.</p> <pre><code>timegraph.to_sequence(ToSequenceVisitorSlidingWindow()\\\n.next_node_strategy(StrategySelectNextNodeRandomlyFromFirstGraph())\\\n.next_value_strategy(StrategyNextValueInNodeRandomForSlidingWindow().skip_every_x_steps(1))\\\n.ts_length(50))\\\n.draw_sequence()\n</code></pre> <p>When choosing the next node, the following strategies have been implemented so far: random node, random node neighbour, random node degree, random walk, random walk with restart, random walk with jump.</p>"},{"location":"#publications","title":"Publications","text":"<p>When using this work for research purposes, we would appreciate it if the following references could be included:</p> <p>Below we provide a curated list of papers related to our research in this area:</p>"},{"location":"conf/","title":"Conf","text":""},{"location":"tutorial/","title":"Tutorial","text":"In\u00a0[1]: Copied! <pre>import os\nimport sys\nnb_dir = os.path.split(os.getcwd())[0]\nif nb_dir not in sys.path:\n    sys.path.append(nb_dir)\n\nfrom core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingSlidingWindow, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph, ToSequenceVisitorSlidingWindow, ToSequenceVisitor\n\nfrom tsg_io.input import CsvFile\nfrom from_graph.strategy_to_time_sequence import StrategyNextValueInNodeRandom, StrategyNextValueInNodeRandomForSlidingWindow, StrategyNextValueInNodeRoundRobin, StrategyNextValueInNodeRoundRobinForSlidingWindow, StrategySelectNextNodeRandomlyAcrossGraphs, StrategySelectNextNodeRandomlyFromFirstGraph\nfrom to_graph.strategy_linking_graph import StrategyLinkingGraphByValueWithinRange, LinkNodesWithinGraph\nfrom to_graph.strategy_linking_multi_graphs import LinkGraphs\nfrom to_graph.strategy_to_graph import BuildTimeseriesToGraphNaturalVisibilityStrategy, BuildTimeseriesToGraphHorizontalVisibilityStrategy\n\nimport warnings\nwarnings.filterwarnings('ignore')\n</pre> import os import sys nb_dir = os.path.split(os.getcwd())[0] if nb_dir not in sys.path:     sys.path.append(nb_dir)  from core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingSlidingWindow, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph, ToSequenceVisitorSlidingWindow, ToSequenceVisitor  from tsg_io.input import CsvFile from from_graph.strategy_to_time_sequence import StrategyNextValueInNodeRandom, StrategyNextValueInNodeRandomForSlidingWindow, StrategyNextValueInNodeRoundRobin, StrategyNextValueInNodeRoundRobinForSlidingWindow, StrategySelectNextNodeRandomlyAcrossGraphs, StrategySelectNextNodeRandomlyFromFirstGraph from to_graph.strategy_linking_graph import StrategyLinkingGraphByValueWithinRange, LinkNodesWithinGraph from to_graph.strategy_linking_multi_graphs import LinkGraphs from to_graph.strategy_to_graph import BuildTimeseriesToGraphNaturalVisibilityStrategy, BuildTimeseriesToGraphHorizontalVisibilityStrategy  import warnings warnings.filterwarnings('ignore') In\u00a0[2]: Copied! <pre>amazon_path = os.path.join(os.getcwd(), \"tutorial_data\", \"AMZN.csv\")\napple_path = os.path.join(os.getcwd(), \"tutorial_data\", \"APPLE.csv\")\n</pre> amazon_path = os.path.join(os.getcwd(), \"tutorial_data\", \"AMZN.csv\") apple_path = os.path.join(os.getcwd(), \"tutorial_data\", \"APPLE.csv\") In\u00a0[3]: Copied! <pre>timegraph_1 = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\\n    .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().with_limit(1).get_strategy())\\\n    .add_edge(0,2)\\\n    .add_edge(13, 21, weight = 17)\\\n    .link(LinkNodesWithinGraph().by_value(StrategyLinkingGraphByValueWithinRange(2)).seasonalities(15))\\\n    .draw(\"blue\")\n</pre> timegraph_1 = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\     .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().with_limit(1).get_strategy())\\     .add_edge(0,2)\\     .add_edge(13, 21, weight = 17)\\     .link(LinkNodesWithinGraph().by_value(StrategyLinkingGraphByValueWithinRange(2)).seasonalities(15))\\     .draw(\"blue\")  In\u00a0[4]: Copied! <pre>timegraph_2 = Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingComposite()\\\n        .add(TimeseriesPreprocessingSegmentation(60, 120))\\\n        .add(TimeseriesPreprocessingSlidingWindow(5)))\\\n    .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().get_strategy())\\\n    .link(LinkGraphs().sliding_window())\\\n    .combine_identical_subgraphs()\\\n    .draw(\"red\")\n</pre> timegraph_2 = Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingComposite()\\         .add(TimeseriesPreprocessingSegmentation(60, 120))\\         .add(TimeseriesPreprocessingSlidingWindow(5)))\\     .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().get_strategy())\\     .link(LinkGraphs().sliding_window())\\     .combine_identical_subgraphs()\\     .draw(\"red\") In\u00a0[5]: Copied! <pre>timegraph_3 = Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\\n    .add(Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(90, 120)))\\\n    .add(Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(150, 180)))\\\n    .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().with_limit(1).get_strategy())\\\n    .link(LinkGraphs().time_cooccurrence())\\\n    .link(LinkNodesWithinGraph().by_value(StrategyLinkingGraphByValueWithinRange(0.5)))\\\n    .combine_identical_nodes()\\\n    .draw(\"brown\")\n</pre> timegraph_3 = Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\     .add(Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(90, 120)))\\     .add(Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(150, 180)))\\     .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().with_limit(1).get_strategy())\\     .link(LinkGraphs().time_cooccurrence())\\     .link(LinkNodesWithinGraph().by_value(StrategyLinkingGraphByValueWithinRange(0.5)))\\     .combine_identical_nodes()\\     .draw(\"brown\") In\u00a0[6]: Copied! <pre>timegraph_4 = Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingComposite()\\\n        .add(TimeseriesPreprocessingSegmentation(60, 110))\\\n        .add(TimeseriesPreprocessingSlidingWindow(5)))\\\n    .add(Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingComposite()\\\n            .add(TimeseriesPreprocessingSegmentation(120, 170))\\\n            .add(TimeseriesPreprocessingSlidingWindow(5)))\\\n        .add(Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\\n            .with_preprocessing(TimeseriesPreprocessingComposite()\\\n                    .add(TimeseriesPreprocessingSegmentation(190, 240))\\\n                    .add(TimeseriesPreprocessingSlidingWindow(5)))))\\\n    .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().get_strategy())\\\n    .link(LinkGraphs().sliding_window().time_cooccurrence())\\\n    .combine_identical_subgraphs()\\\n    .link(LinkNodesWithinGraph().seasonalities(15))\\\n    .draw(\"green\")\n</pre> timegraph_4 = Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingComposite()\\         .add(TimeseriesPreprocessingSegmentation(60, 110))\\         .add(TimeseriesPreprocessingSlidingWindow(5)))\\     .add(Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingComposite()\\             .add(TimeseriesPreprocessingSegmentation(120, 170))\\             .add(TimeseriesPreprocessingSlidingWindow(5)))\\         .add(Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\             .with_preprocessing(TimeseriesPreprocessingComposite()\\                     .add(TimeseriesPreprocessingSegmentation(190, 240))\\                     .add(TimeseriesPreprocessingSlidingWindow(5)))))\\     .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().get_strategy())\\     .link(LinkGraphs().sliding_window().time_cooccurrence())\\     .combine_identical_subgraphs()\\     .link(LinkNodesWithinGraph().seasonalities(15))\\     .draw(\"green\") In\u00a0[7]: Copied! <pre>timegraph_1.to_sequence(ToSequenceVisitor()\\\n        .next_node_strategy(StrategySelectNextNodeRandomlyAcrossGraphs())\\\n        .next_value_strategy(StrategyNextValueInNodeRoundRobin().skip_every_x_steps(1))\\\n        .ts_length(100))\\\n    .draw_sequence()\n</pre> timegraph_1.to_sequence(ToSequenceVisitor()\\         .next_node_strategy(StrategySelectNextNodeRandomlyAcrossGraphs())\\         .next_value_strategy(StrategyNextValueInNodeRoundRobin().skip_every_x_steps(1))\\         .ts_length(100))\\     .draw_sequence() Out[7]: <pre>&lt;core.model.TimeGraph at 0x25ab0f4d880&gt;</pre> In\u00a0[8]: Copied! <pre>timegraph_2.to_sequence(ToSequenceVisitorSlidingWindow()\\\n    .next_node_strategy(StrategySelectNextNodeRandomlyFromFirstGraph())\\\n    .next_value_strategy(StrategyNextValueInNodeRandomForSlidingWindow().skip_every_x_steps(1))\\\n    .ts_length(50))\\\n    .draw_sequence()\n</pre> timegraph_2.to_sequence(ToSequenceVisitorSlidingWindow()\\     .next_node_strategy(StrategySelectNextNodeRandomlyFromFirstGraph())\\     .next_value_strategy(StrategyNextValueInNodeRandomForSlidingWindow().skip_every_x_steps(1))\\     .ts_length(50))\\     .draw_sequence() Out[8]: <pre>&lt;core.model.TimeGraph at 0x25ab13455e0&gt;</pre> <p>We can also convert our multivriate graphs back to multiple time series.</p> In\u00a0[9]: Copied! <pre>timegraph_3.to_sequence(ToSequenceVisitor()\\\n    .next_node_strategy(StrategySelectNextNodeRandomlyAcrossGraphs().change_graphs_every_x_steps(2))\\\n    .next_value_strategy(StrategyNextValueInNodeRoundRobin().skip_every_x_steps(1))\\\n    .ts_length(50))\\\n    .draw_sequence()\n</pre> timegraph_3.to_sequence(ToSequenceVisitor()\\     .next_node_strategy(StrategySelectNextNodeRandomlyAcrossGraphs().change_graphs_every_x_steps(2))\\     .next_value_strategy(StrategyNextValueInNodeRoundRobin().skip_every_x_steps(1))\\     .ts_length(50))\\     .draw_sequence() Out[9]: <pre>&lt;core.model.TimeGraph at 0x25a9fed7a40&gt;</pre> In\u00a0[10]: Copied! <pre>timegraph_4.to_sequence(ToSequenceVisitorSlidingWindow()\\\n    .next_node_strategy(StrategySelectNextNodeRandomlyFromFirstGraph())\\\n    .next_value_strategy(StrategyNextValueInNodeRoundRobinForSlidingWindow())\\\n    .ts_length(100))\\\n    .draw_sequence()\n</pre> timegraph_4.to_sequence(ToSequenceVisitorSlidingWindow()\\     .next_node_strategy(StrategySelectNextNodeRandomlyFromFirstGraph())\\     .next_value_strategy(StrategyNextValueInNodeRoundRobinForSlidingWindow())\\     .ts_length(100))\\     .draw_sequence() Out[10]: <pre>&lt;core.model.TimeGraph at 0x25ab13b7ce0&gt;</pre>"},{"location":"tutorial/#tutorial","title":"Tutorial\u00b6","text":"<p>The following notebook provides a demonstration how the ts2g2 library can be used to convert time series into graphs and graphs into time series. To that end, we use a dataset with the history of daily prices of Amazon stock (AMZN) and Apple stock (APPLE). All the column desinpiptions are provided. Currency is USD.</p>"},{"location":"tutorial/#accessing-data","title":"Accessing data\u00b6","text":"<p>We first get path to the data.</p>"},{"location":"tutorial/#converting-time-series-to-graph","title":"Converting time series to graph\u00b6","text":"<p>Here are two examples of conversion of data from time serie to graph. Second one is inpeated using sliding window mechanism. That means its nodes are smaller graphs inpeated based on a segments of data (length = 5).</p>"},{"location":"tutorial/#combining-multiple-graphs","title":"Combining multiple graphs\u00b6","text":"<p>We can store and combine multiple of already inpeated objects TimeSeriesToGraph into one object MultivariateTimeSeriesToGraph</p>"},{"location":"tutorial/#back-to-time-series","title":"Back to time series\u00b6","text":"<p>We can convert existing graphs back to time series based on our strategy.</p>"},{"location":"documentation/model/","title":"Model","text":""},{"location":"documentation/model/#core.model.TimeGraph","title":"<code>TimeGraph</code>","text":"<p>Stores already made graph, allows us to add edges and links between nodes.</p> <p>Attributes:</p> <ul> <li><code>graph</code>: object networkx.Graph</li> </ul>"},{"location":"documentation/model/#core.model.TimeGraph.add_edge","title":"<code>add_edge(node_1, node_2, weight=None)</code>","text":"<p>Adds edge between node_1 and node_2.</p>"},{"location":"documentation/model/#core.model.TimeGraph.combine_identical_nodes","title":"<code>combine_identical_nodes()</code>","text":"<p>Combines nodes that have same value of attribute self.attribute if graph is classical graph and nodes that are identical graphs if graph is created using sliding window mechanism.</p>"},{"location":"documentation/model/#core.model.TimeGraph.combine_identical_subgraphs","title":"<code>combine_identical_subgraphs()</code>","text":"<p>Combines nodes that have same value of attribute self.attribute if graph is classical graph and nodes that are identical graphs if graph is created using sliding window mechanism.</p>"},{"location":"documentation/model/#core.model.TimeGraph.draw","title":"<code>draw(color='black')</code>","text":"<p>Draws the created graph</p>"},{"location":"documentation/model/#core.model.TimeGraph.draw_sequence","title":"<code>draw_sequence()</code>","text":"<p>Draws timeseries.</p>"},{"location":"documentation/model/#core.model.TimeGraph.link","title":"<code>link(link_strategy)</code>","text":"<p>Links nodes based on link_strategy. link_strategy is object of class Link.</p>"},{"location":"documentation/model/#core.model.TimeGraph.plot_timeseries","title":"<code>plot_timeseries(sequence, title, x_legend, y_legend, color)</code>","text":"<p>Function to sets parameters to draw timeseries.</p>"},{"location":"documentation/model/#core.model.Timeseries","title":"<code>Timeseries</code>","text":"<p>Saves extracted data as timeseries.</p>"},{"location":"documentation/model/#core.model.TimeseriesPreprocessing","title":"<code>TimeseriesPreprocessing</code>","text":"<p>Processes timeseries.</p>"},{"location":"documentation/model/#core.model.TimeseriesPreprocessingComposite","title":"<code>TimeseriesPreprocessingComposite</code>","text":"<p>Composites processing strategies, allowing us to use multiple of them.</p> <p>Attributes:</p> <ul> <li><code>ts</code>: Timeseries object with extracted timeseries</li> </ul>"},{"location":"documentation/model/#core.model.TimeseriesPreprocessingSegmentation","title":"<code>TimeseriesPreprocessingSegmentation</code>","text":"<p>               Bases: <code>TimeseriesPreprocessing</code></p> <p>Returns a designated segment from timeseries.</p> <p>Attributes:</p> <ul> <li><code>segmen_start</code>: start of the segment</li> <li><code>segment_end</code>: end of the segment</li> </ul>"},{"location":"documentation/model/#core.model.TimeseriesPreprocessingSlidingWindow","title":"<code>TimeseriesPreprocessingSlidingWindow</code>","text":"<p>               Bases: <code>TimeseriesPreprocessing</code></p> <p>Returns an array of segments made with sliding window mechanism.</p> <p>Attributes:</p> <ul> <li><code>win_size</code>: size of the creted segments</li> <li><code>move_len</code>: tells for how many data does window move until next segment</li> </ul>"},{"location":"documentation/model/#core.model.TimeseriesView","title":"<code>TimeseriesView</code>","text":"<p>Stores one or more already processed timeseries, then changes them to graph using provided strategy. If we have multiple timie series turned to graphs, we can link them into one multivariate graph.</p> <p>Attributes:</p> <ul> <li><code>ts</code>: processed timeseries</li> <li><code>graph</code>: networkx.Graph object</li> </ul>"},{"location":"documentation/model/#core.model.ToSequenceVisitor","title":"<code>ToSequenceVisitor</code>","text":"<p>               Bases: <code>ToSequenceVisitorMaster</code></p> <p>Converts ordinary graphs back to timeseries.</p>"},{"location":"documentation/model/#core.model.ToSequenceVisitorMaster","title":"<code>ToSequenceVisitorMaster</code>","text":"<p>Turns graphs back to timeseries.</p> <p>Attributes:</p> <ul> <li><code>graph</code>: networkx.Graph object</li> <li><code>node_strategy</code>: strategy_to_time_sequence.StrategySelectNextNode object</li> <li><code>value_strategy</code>: strategy_to_time_sequence.StrategyNextValueInNode object</li> </ul>"},{"location":"documentation/model/#core.model.ToSequenceVisitorMaster.to_sequence","title":"<code>to_sequence(graph)</code>","text":"<p>Converts graph into time sequences.</p>"},{"location":"documentation/model/#core.model.ToSequenceVisitorSlidingWindow","title":"<code>ToSequenceVisitorSlidingWindow</code>","text":"<p>               Bases: <code>ToSequenceVisitorMaster</code></p> <p>Converts graphs made using sliding window mechanism back to timeseries</p>"},{"location":"documentation/strategy_linking_graph/","title":"Graph linking strategy","text":""},{"location":"documentation/strategy_linking_graph/#to_graph.strategy_linking_graph.LinkNodesWithinGraph","title":"<code>LinkNodesWithinGraph</code>","text":"<p>Builder class for linking nodes within one graph, through which we can access linking strategies.</p>"},{"location":"documentation/strategy_linking_graph/#to_graph.strategy_linking_graph.LinkNodesWithinGraph.by_value","title":"<code>by_value(strategy)</code>","text":"<p>Notes that we want to connect nodes based on values and strategy.</p>"},{"location":"documentation/strategy_linking_graph/#to_graph.strategy_linking_graph.LinkNodesWithinGraph.seasonalities","title":"<code>seasonalities(period)</code>","text":"<p>Notes that we want to connect based on seasonalities, ad sets the period parameter.</p>"},{"location":"documentation/strategy_linking_graph/#to_graph.strategy_linking_graph.StrategyLinkingGraph","title":"<code>StrategyLinkingGraph</code>","text":"<p>Links nodes within graph.</p> <p>Attributes:</p> <ul> <li><code>graph</code>: networkx.Graph object</li> <li><code>strategy_precedence</code>: tells in which order should the strategies be excetuted</li> </ul>"},{"location":"documentation/strategy_linking_graph/#to_graph.strategy_linking_graph.StrategyLinkingGraphBySeasonalities","title":"<code>StrategyLinkingGraphBySeasonalities</code>","text":"<p>               Bases: <code>StrategyLinkingGraph</code></p> <p>Links all nodes that are sequentially self.period apart.</p> <p>Attributes:</p> <ul> <li><code>period</code>: tells how far apart must two nodes be to be linked</li> </ul>"},{"location":"documentation/strategy_linking_graph/#to_graph.strategy_linking_graph.StrategyLinkingGraphByValue","title":"<code>StrategyLinkingGraphByValue</code>","text":"<p>               Bases: <code>StrategyLinkingGraph</code></p> <p>Links nodes based on their value.</p>"},{"location":"documentation/strategy_linking_graph/#to_graph.strategy_linking_graph.StrategyLinkingGraphByValueWithinRange","title":"<code>StrategyLinkingGraphByValueWithinRange</code>","text":"<p>               Bases: <code>StrategyLinkingGraphByValue</code></p> <p>Links nodes whose value difference is within range of allowed difference.</p> <p>Attributes:</p> <ul> <li><code>allowed_difference</code>: tells us the allowed difference between values of two nodes for the nodes to be linked together</li> </ul>"},{"location":"documentation/strategy_linking_multi_graphs/","title":"Strategy connecting multiple graphs","text":""},{"location":"documentation/strategy_linking_multi_graphs/#to_graph.strategy_linking_multi_graphs.LinkGraphs","title":"<code>LinkGraphs</code>","text":"<p>Builder class for linking multiple graphs, through which we can access linking strategies.</p> <p>Attributes:</p> <ul> <li><code>graph</code>: networkx.Graph object</li> <li><code>graphs</code>: dictionary of networkx.Graph objects</li> <li><code>command_array</code>: an array that stores linking strategies</li> </ul>"},{"location":"documentation/strategy_linking_multi_graphs/#to_graph.strategy_linking_multi_graphs.LinkGraphs.sliding_window","title":"<code>sliding_window()</code>","text":"<p>Notes that we want to connect graphs in a multivariate graph to create sliding window graph.</p>"},{"location":"documentation/strategy_linking_multi_graphs/#to_graph.strategy_linking_multi_graphs.LinkGraphs.time_cooccurrence","title":"<code>time_cooccurrence()</code>","text":"<p>Notes that we want to connect graphs in a multivariate graph based on time co-ocurrance.</p>"},{"location":"documentation/strategy_linking_multi_graphs/#to_graph.strategy_linking_multi_graphs.StrategyLinkingMultipleGraphs","title":"<code>StrategyLinkingMultipleGraphs</code>","text":"<p>Links multiple graphs together.</p> <p>Attributes:</p> <ul> <li><code>graph</code>: networkx.Graph object</li> <li><code>graphs</code>: dictionary of networkx.Graph objects</li> <li><code>strategy_precedence</code>: tells in which order should the strategies be excetuted</li> </ul>"},{"location":"documentation/strategy_linking_multi_graphs/#to_graph.strategy_linking_multi_graphs.StrategyLinkingMultipleGraphsByTimeCooccurrence","title":"<code>StrategyLinkingMultipleGraphsByTimeCooccurrence</code>","text":"<p>               Bases: <code>StrategyLinkingMultipleGraphs</code></p> <p>Links nodes from multiple graphs based on their sequential order.</p>"},{"location":"documentation/strategy_linking_multi_graphs/#to_graph.strategy_linking_multi_graphs.StrategyLinkingMultipleGraphsSlidingWindow","title":"<code>StrategyLinkingMultipleGraphsSlidingWindow</code>","text":"<p>               Bases: <code>StrategyLinkingMultipleGraphs</code></p> <p>Sequentially links graphs made by sliding window mechanism.</p>"},{"location":"documentation/strategy_to_graph/","title":"To graph strategy","text":""},{"location":"documentation/strategy_to_graph/#to_graph.strategy_to_graph.BuildStrategyForTimeseriesToGraph","title":"<code>BuildStrategyForTimeseriesToGraph</code>","text":"<p>Sets and returns a strategy with which we can convert timeseries into graphs.</p> <p>Attributes:</p> <ul> <li><code>visibility</code>: an array of visibility constraints strategies</li> </ul>"},{"location":"documentation/strategy_to_graph/#to_graph.strategy_to_graph.BuildStrategyForTimeseriesToGraph.get_strategy","title":"<code>get_strategy()</code>","text":"<p>Returns strategy.</p>"},{"location":"documentation/strategy_to_graph/#to_graph.strategy_to_graph.BuildStrategyForTimeseriesToGraph.with_angle","title":"<code>with_angle(angle)</code>","text":"<p>Sets an angle in which range must a node be to be considered for connection.</p>"},{"location":"documentation/strategy_to_graph/#to_graph.strategy_to_graph.BuildStrategyForTimeseriesToGraph.with_limit","title":"<code>with_limit(limit)</code>","text":"<p>Sets a limit as to how many data instances two nodes must be apart to be considered for connection.</p>"},{"location":"documentation/strategy_to_graph/#to_graph.strategy_to_graph.BuildTimeseriesToGraphHorizontalVisibilityStrategy","title":"<code>BuildTimeseriesToGraphHorizontalVisibilityStrategy</code>","text":"<p>               Bases: <code>BuildStrategyForTimeseriesToGraph</code></p> <p>As initial strategy sets Horizontal visibility strategy.</p>"},{"location":"documentation/strategy_to_graph/#to_graph.strategy_to_graph.BuildTimeseriesToGraphNaturalVisibilityStrategy","title":"<code>BuildTimeseriesToGraphNaturalVisibilityStrategy</code>","text":"<p>               Bases: <code>BuildStrategyForTimeseriesToGraph</code></p> <p>As initial strategy sets Natural visibility strategy.</p>"},{"location":"documentation/strategy_to_time_sequence/","title":"To Time sequence strategy","text":""},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategyNextValueInNode","title":"<code>StrategyNextValueInNode</code>","text":"<p>Stores strategy to chose next value in the selected node.</p> <p>Attributes:</p> <ul> <li><code>skip</code>: tells us how many values do we skip before appending next one</li> </ul>"},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategyNextValueInNodeRandom","title":"<code>StrategyNextValueInNodeRandom</code>","text":"<p>               Bases: <code>StrategyNextValueInNode</code></p> <p>Chooses next value in selected node randomly.</p>"},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategyNextValueInNodeRandomForSlidingWindow","title":"<code>StrategyNextValueInNodeRandomForSlidingWindow</code>","text":"<p>               Bases: <code>StrategyNextValueInNode</code></p> <p>Chooses next value in selected node randomly in graph made with sliding window mechanism.</p>"},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategyNextValueInNodeRoundRobin","title":"<code>StrategyNextValueInNodeRoundRobin</code>","text":"<p>               Bases: <code>StrategyNextValueInNode</code></p> <p>Chooses next value in selected node sequentially, in the same order as they were saved.</p>"},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategyNextValueInNodeRoundRobinForSlidingWindow","title":"<code>StrategyNextValueInNodeRoundRobinForSlidingWindow</code>","text":"<p>               Bases: <code>StrategyNextValueInNode</code></p> <p>Chooses next value in selected node sequentially for graph made with sliding window mechanism, in the same order as they were saved.</p>"},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategySelectNextNode","title":"<code>StrategySelectNextNode</code>","text":"<p>Stores strategy to chose next node from the neighbors of the previous node.</p> <p>Attributes:</p> <ul> <li><code>change_graphs</code>: tells how long we walk through one graph, before switching to next one</li> <li><code>graph</code>: networkx.Graph object</li> </ul>"},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs","title":"<code>StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs</code>","text":"<p>               Bases: <code>StrategySelectNextNode</code></p> <p>Walks through all graphs in a multivariate graph and chooses next node randomly.</p>"},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs.next_node","title":"<code>next_node(i, graph_index, nodes, switch, node)</code>","text":"<p>From neighbors of the previous node randomly chooses next node.</p>"},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategySelectNextNodeRandomlyFromNeighboursFromFirstGraph","title":"<code>StrategySelectNextNodeRandomlyFromNeighboursFromFirstGraph</code>","text":"<p>               Bases: <code>StrategySelectNextNode</code></p> <p>Walks through first graph and chooses next node randomly.</p>"},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategySelectNextNodeRandomlyFromNeighboursFromFirstGraph.next_node","title":"<code>next_node(i, graph_index, nodes, switch, node)</code>","text":"<p>From neighbors of the previous node randomly chooses next node.</p>"},{"location":"documentation/tsg_io/","title":"Input/output","text":""},{"location":"documentation/tsg_io/#csv-and-xml-files","title":"Csv and xml files:","text":""},{"location":"documentation/tsg_io/#tsg_io.input.CsvFile","title":"<code>CsvFile</code>","text":"<p>               Bases: <code>CsvRead</code></p> <p>Returns proccessed data from csv file sorted by \"Date\".</p> <p>Attributes:</p> <ul> <li><code>path</code>: path to csv file with data</li> <li><code>column</code>: which column of data do we extract</li> </ul>"},{"location":"documentation/tsg_io/#tsg_io.input.CsvFile.from_csv","title":"<code>from_csv()</code>","text":"<p>Extracts the data using set attributes.</p>"},{"location":"documentation/tsg_io/#tsg_io.input.CsvRead","title":"<code>CsvRead</code>","text":"<p>Extracts data from a csv file.</p>"},{"location":"documentation/tsg_io/#tsg_io.input.FundamentalsReportFinancialStatements","title":"<code>FundamentalsReportFinancialStatements</code>","text":"<p>               Bases: <code>XmlRead</code></p> <p>Extracting data from an xml file. Further explanation on file format can be found on: https://docs-2-0--quantrocket.netlify.app/data/reuters/</p> <p>Attributes:</p> <ul> <li><code>path</code>: path to csv file with data</li> <li><code>item</code>: which item are we observing</li> <li><code>season</code>: are we observing values annually or interim</li> </ul>"},{"location":"documentation/tsg_io/#tsg_io.input.FundamentalsReportFinancialStatements.from_xml","title":"<code>from_xml()</code>","text":"<p>Extracts the data using set attributes.</p>"},{"location":"documentation/tsg_io/#tsg_io.input.XmlRead","title":"<code>XmlRead</code>","text":"<p>Extracts data from an xml file.</p>"}]}