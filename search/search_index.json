{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ts2g<sup>2</sup>","text":"<p>TS2G<sup>2</sup> stands for \"timeseries to graphs and back\". The library implements a variety of strategies to convert timeseries into graphs, and convert graphs into sequences. Below, we provide a code snippet to generate a graph from timeseries:</p> <pre><code># load time series from a file\ntimegraph = model.Timeseries(CsvStock(some_file_path, \"ColumnOfInterest\").from_csv())\\\n\n# and preprocess the timeseries with multiple preprocessing strategies\n.with_preprocessing(model.TimeseriesPreprocessingComposite()\\\n    .add_strategy(model.TimeseriesPreprocessingSegmentation(60, 120))\\\n    .add_strategy(model.TimeseriesPreprocessingSlidingWindow(5)))\\\n\n# then create a graph from the timeseries, following a particular strategy\n.to_graph(tgs.BuildTimeseriesToGraphNaturalVisibilityStrategy().get_strategy())\\\n\n# link graphs that result from the same timeseries, but at different sliding window frames\n.link(mgl.LinkGraphs().sliding_window())\\\n\n# and combine identical graphs that result from the abovementioned time windows into single nodes\n.combine_identical_nodes_slid_win()\\\n\n# finally, draw the graph\n.draw(\"red\")\n</code></pre> <p>For a more detailed example, look at the Amazon stocks demo.</p> <p>Many of the methods implemented in this library are described in Silva, Vanessa Freitas, et al. \"Time series analysis via network science: Concepts and algorithms.\" Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery 11.3 (2021): e1404. Nevertheless, the library also includes additional techniques found in other works from the scientific literature.</p> <p>This package is being developed as part of the Graph-Massivizer project.  The package is a joint effort between the Jo\u017eef Stefan Institute, the University of Twente, the Vrije Universiteit Amsterdam, the University of Klagenfurt, the University of Bologna, and Peracton.</p>"},{"location":"#converting-timeseries-into-graphs","title":"Converting timeseries into graphs","text":""},{"location":"#implemented-features","title":"Implemented features","text":"# Visibility Graph Graph type Constraints Undirected Directed Weighted Penetration Angle 1 Natural Visibility Graph X X X X X 2 Horizontal Visibility Graph X X X X X 3 Difference Visibility Graph 4 Quantile Graph X X 5 Ordinal Partition Graph X X"},{"location":"#references-table","title":"References table","text":"# Visibility Graph Graph type Constraints Undirected Directed Weighted Penetration Angle 1 Natural Visibility Graph ref ref ref ref,        ref 2 Horizontal Visibility Graph ref ref ref ref,        ref 3 Difference Visibility Graph 4 Quantile Graph ref 5 Ordinal Partition Graph"},{"location":"#converting-graphs-into-sequences","title":"Converting graphs into sequences","text":"<p>Graphs are converted back to timeseries by sampling node values from the graph following different strategies. Below, we provide a short snippet of code, to illustrate how this can be done.</p> <pre><code>timegraph.to_sequence(model.ToSequenceVisitorSlidingWindow()\\\n.next_node_strategy(tts.StrategySelectNextNodeRandomlyFromFirstGraph())\\\n.next_value_strategy(tts.StrategyNextValueInNodeRandomForSlidingWindow().skip_every_x_steps(1))\\\n.ts_length(50))\\\n.draw_sequence()\n</code></pre> <p>When choosing the next node, the following strategies have been implemented so far: random node, random node neighbour, random node degree, random walk, random walk with restart, random walk with jump.</p>"},{"location":"conf/","title":"Conf","text":""},{"location":"documentation/embeddings/","title":"Embeddings","text":""},{"location":"documentation/model/","title":"Core model","text":""},{"location":"documentation/model/#core.model.StrategyNotImplementedError","title":"<code>StrategyNotImplementedError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Custom exception for strategies that are not implemented.</p>"},{"location":"documentation/model/#core.model.TimeGraph","title":"<code>TimeGraph</code>","text":"<p>Stores already made graph, allows us to add edges and links between nodes.</p> <p>Attributes:</p> <ul> <li><code>graph</code>: object networkx.Graph</li> </ul>"},{"location":"documentation/model/#core.model.TimeGraph.add_edge","title":"<code>add_edge(node_1, node_2, weight=None)</code>","text":"<p>Adds edge between node_1 and node_2.</p>"},{"location":"documentation/model/#core.model.TimeGraph.combine_identical_nodes","title":"<code>combine_identical_nodes()</code>","text":"<p>Combines nodes that have same value of attribute self.attribute if graph is classical graph and nodes that are identical graphs if graph is created using sliding window mechanism.</p>"},{"location":"documentation/model/#core.model.TimeGraph.combine_identical_subgraphs","title":"<code>combine_identical_subgraphs()</code>","text":"<p>Combines nodes that have same value of attribute self.attribute if graph is classical graph and nodes that are identical graphs if graph is created using sliding window mechanism.</p>"},{"location":"documentation/model/#core.model.TimeGraph.draw","title":"<code>draw()</code>","text":"<p>Draws the created graph</p>"},{"location":"documentation/model/#core.model.TimeGraph.draw_sequence","title":"<code>draw_sequence()</code>","text":"<p>Draws timeseries.</p>"},{"location":"documentation/model/#core.model.TimeGraph.link","title":"<code>link(link_strategy)</code>","text":"<p>Links nodes based on link_strategy. link_strategy is object of class Link.</p>"},{"location":"documentation/model/#core.model.TimeGraph.plot_timeseries","title":"<code>plot_timeseries(sequence, title, x_legend, y_legend, color)</code>","text":"<p>Function to sets parameters to draw timeseries.</p>"},{"location":"documentation/model/#core.model.Timeseries","title":"<code>Timeseries</code>","text":"<p>Saves extracted data as timeseries.</p>"},{"location":"documentation/model/#core.model.TimeseriesPreprocessing","title":"<code>TimeseriesPreprocessing</code>","text":"<p>Processes timeseries.</p>"},{"location":"documentation/model/#core.model.TimeseriesPreprocessingComposite","title":"<code>TimeseriesPreprocessingComposite</code>","text":"<p>Composites processing strategies, allowing us to use multiple of them.</p> <p>Attributes:</p> <ul> <li><code>ts</code>: Timeseries object with extracted timeseries</li> </ul>"},{"location":"documentation/model/#core.model.TimeseriesPreprocessingSegmentation","title":"<code>TimeseriesPreprocessingSegmentation</code>","text":"<p>               Bases: <code>TimeseriesPreprocessing</code></p> <p>Returns a designated segment from timeseries.</p> <p>Attributes:</p> <ul> <li><code>segmen_start</code>: start of the segment</li> <li><code>segment_end</code>: end of the segment</li> </ul>"},{"location":"documentation/model/#core.model.TimeseriesPreprocessingSlidingWindow","title":"<code>TimeseriesPreprocessingSlidingWindow</code>","text":"<p>               Bases: <code>TimeseriesPreprocessing</code></p> <p>Returns an array of segments made with sliding window mechanism.</p> <p>Attributes:</p> <ul> <li><code>win_size</code>: size of the creted segments</li> <li><code>move_len</code>: tells for how many data does window move until next segment</li> </ul>"},{"location":"documentation/model/#core.model.TimeseriesView","title":"<code>TimeseriesView</code>","text":"<p>Stores one or more already processed timeseries, then changes them to graph using provided strategy. If we have multiple timie series turned to graphs, we can link them into one multivariate graph.</p> <p>Attributes:</p> <ul> <li><code>ts</code>: processed timeseries</li> <li><code>graph</code>: networkx.Graph object</li> </ul>"},{"location":"documentation/model/#core.model.ToSequenceVisitor","title":"<code>ToSequenceVisitor</code>","text":"<p>               Bases: <code>ToSequenceVisitorMaster</code></p> <p>Converts ordinary graphs back to timeseries.</p>"},{"location":"documentation/model/#core.model.ToSequenceVisitorMaster","title":"<code>ToSequenceVisitorMaster</code>","text":"<p>Turns graphs back to timeseries.</p> <p>Attributes:</p> <ul> <li><code>graph</code>: networkx.Graph object</li> <li><code>node_strategy</code>: strategy_to_time_sequence.StrategySelectNextNode object</li> <li><code>value_strategy</code>: strategy_to_time_sequence.StrategyNextValueInNode object</li> </ul>"},{"location":"documentation/model/#core.model.ToSequenceVisitorMaster.to_sequence","title":"<code>to_sequence(graph)</code>","text":"<p>Converts graph into time sequences.</p>"},{"location":"documentation/model/#core.model.ToSequenceVisitorOrdinalPartition","title":"<code>ToSequenceVisitorOrdinalPartition</code>","text":"<p>               Bases: <code>ToSequenceVisitorMaster</code></p> <p>Converts graphs made using ordinal partition mechanism back to timeseries</p>"},{"location":"documentation/model/#core.model.ToSequenceVisitorSlidingWindow","title":"<code>ToSequenceVisitorSlidingWindow</code>","text":"<p>               Bases: <code>ToSequenceVisitorMaster</code></p> <p>Converts graphs made using sliding window mechanism back to timeseries</p>"},{"location":"documentation/strategy_linking_graph/","title":"Graph linking strategies - univariate","text":""},{"location":"documentation/strategy_linking_graph/#to_graph.strategy_linking_graph.LinkNodesWithinGraph","title":"<code>LinkNodesWithinGraph</code>","text":"<p>Builder class for linking nodes within one graph, through which we can access linking strategies.</p>"},{"location":"documentation/strategy_linking_graph/#to_graph.strategy_linking_graph.LinkNodesWithinGraph.by_value","title":"<code>by_value(strategy)</code>","text":"<p>Notes that we want to connect nodes based on values and strategy.</p>"},{"location":"documentation/strategy_linking_graph/#to_graph.strategy_linking_graph.LinkNodesWithinGraph.seasonalities","title":"<code>seasonalities(period)</code>","text":"<p>Notes that we want to connect based on seasonalities, ad sets the period parameter.</p>"},{"location":"documentation/strategy_linking_graph/#to_graph.strategy_linking_graph.StrategyLinkingGraph","title":"<code>StrategyLinkingGraph</code>","text":"<p>Links nodes within graph.</p> <p>Attributes:</p> <ul> <li><code>graph</code>: networkx.Graph object</li> <li><code>strategy_precedence</code>: tells in which order should the strategies be excetuted</li> </ul>"},{"location":"documentation/strategy_linking_graph/#to_graph.strategy_linking_graph.StrategyLinkingGraphBySeasonalities","title":"<code>StrategyLinkingGraphBySeasonalities</code>","text":"<p>               Bases: <code>StrategyLinkingGraph</code></p> <p>Links all nodes that are sequentially self.period apart.</p> <p>Attributes:</p> <ul> <li><code>period</code>: tells how far apart must two nodes be to be linked</li> </ul>"},{"location":"documentation/strategy_linking_graph/#to_graph.strategy_linking_graph.StrategyLinkingGraphByValue","title":"<code>StrategyLinkingGraphByValue</code>","text":"<p>               Bases: <code>StrategyLinkingGraph</code></p> <p>Links nodes based on their value.</p>"},{"location":"documentation/strategy_linking_graph/#to_graph.strategy_linking_graph.StrategyLinkingGraphByValueWithinRange","title":"<code>StrategyLinkingGraphByValueWithinRange</code>","text":"<p>               Bases: <code>StrategyLinkingGraphByValue</code></p> <p>Links nodes whose value difference is within range of allowed difference.</p> <p>Attributes:</p> <ul> <li><code>allowed_difference</code>: tells us the allowed difference between values of two nodes for the nodes to be linked together</li> </ul>"},{"location":"documentation/strategy_linking_graph/#to_graph.strategy_linking_graph.StrategyNotImplementedError","title":"<code>StrategyNotImplementedError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Custom exception for strategies that are not implemented.</p>"},{"location":"documentation/strategy_linking_multi_graphs/","title":"Graph linking strategies - multivariate","text":""},{"location":"documentation/strategy_linking_multi_graphs/#to_graph.strategy_linking_multi_graphs.LinkGraphs","title":"<code>LinkGraphs</code>","text":"<p>Builder class for linking multiple graphs, through which we can access linking strategies.</p> <p>Attributes:</p> <ul> <li><code>graph</code>: networkx.Graph object</li> <li><code>graphs</code>: dictionary of networkx.Graph objects</li> <li><code>command_array</code>: an array that stores linking strategies</li> </ul>"},{"location":"documentation/strategy_linking_multi_graphs/#to_graph.strategy_linking_multi_graphs.LinkGraphs.correlation","title":"<code>correlation(corr)</code>","text":"<p>Notes that we want to connect graphs in a multivariate graph based on correlation.</p>"},{"location":"documentation/strategy_linking_multi_graphs/#to_graph.strategy_linking_multi_graphs.LinkGraphs.correlation_sliding_window","title":"<code>correlation_sliding_window(corr)</code>","text":"<p>Notes that we want to connect graphs in a multivariate graph based on correlation for sliding window graph.</p>"},{"location":"documentation/strategy_linking_multi_graphs/#to_graph.strategy_linking_multi_graphs.LinkGraphs.dynamic_timewarping","title":"<code>dynamic_timewarping()</code>","text":"<p>Notes that we want to connect graphs in a multivariate graph based on dynamic time warping.</p>"},{"location":"documentation/strategy_linking_multi_graphs/#to_graph.strategy_linking_multi_graphs.LinkGraphs.positional_correlation_sliding_window","title":"<code>positional_correlation_sliding_window(corr)</code>","text":"<p>Notes that we want to connect graphs in a multivariate graph based on correlation for same positioned windows of series.</p>"},{"location":"documentation/strategy_linking_multi_graphs/#to_graph.strategy_linking_multi_graphs.LinkGraphs.sliding_window","title":"<code>sliding_window()</code>","text":"<p>Notes that we want to connect graphs in a multivariate graph to create sliding window graph.</p>"},{"location":"documentation/strategy_linking_multi_graphs/#to_graph.strategy_linking_multi_graphs.LinkGraphs.time_cooccurrence","title":"<code>time_cooccurrence()</code>","text":"<p>Notes that we want to connect graphs in a multivariate graph based on time co-ocurrance.</p>"},{"location":"documentation/strategy_linking_multi_graphs/#to_graph.strategy_linking_multi_graphs.StrategyLinkingMultipleGraphs","title":"<code>StrategyLinkingMultipleGraphs</code>","text":"<p>Links multiple graphs together.</p> <p>Attributes:</p> <ul> <li><code>graph</code>: networkx.Graph object</li> <li><code>graphs</code>: dictionary of networkx.Graph objects</li> <li><code>strategy_precedence</code>: tells in which order should the strategies be excetuted</li> </ul>"},{"location":"documentation/strategy_linking_multi_graphs/#to_graph.strategy_linking_multi_graphs.StrategyLinkingMultipleGraphsByTimeCooccurrence","title":"<code>StrategyLinkingMultipleGraphsByTimeCooccurrence</code>","text":"<p>               Bases: <code>StrategyLinkingMultipleGraphs</code></p> <p>Links nodes from multiple graphs based on their sequential order.</p>"},{"location":"documentation/strategy_linking_multi_graphs/#to_graph.strategy_linking_multi_graphs.StrategyLinkingMultipleGraphsDynamicTimeWarping","title":"<code>StrategyLinkingMultipleGraphsDynamicTimeWarping</code>","text":"<p>               Bases: <code>StrategyLinkingMultipleGraphs</code></p> <p>Connects visibility graphs based on Dynamic time warping.</p>"},{"location":"documentation/strategy_linking_multi_graphs/#to_graph.strategy_linking_multi_graphs.StrategyLinkingMultipleGraphsSlidingWindow","title":"<code>StrategyLinkingMultipleGraphsSlidingWindow</code>","text":"<p>               Bases: <code>StrategyLinkingMultipleGraphs</code></p> <p>Sequentially links graphs made by sliding window mechanism.</p>"},{"location":"documentation/strategy_to_graph/","title":"Turning time series into graphs","text":""},{"location":"documentation/strategy_to_graph/#to_graph.strategy_to_graph.BuildStrategyForTimeseriesToGraph","title":"<code>BuildStrategyForTimeseriesToGraph</code>","text":"<p>Sets and returns a strategy with which we can convert timeseries into graphs.</p> <p>Attributes:</p> <ul> <li><code>visibility</code>: an array of visibility constraints strategies</li> </ul>"},{"location":"documentation/strategy_to_graph/#to_graph.strategy_to_graph.BuildStrategyForTimeseriesToGraph.get_strategy","title":"<code>get_strategy()</code>","text":"<p>Returns strategy.</p>"},{"location":"documentation/strategy_to_graph/#to_graph.strategy_to_graph.BuildStrategyForTimeseriesToGraph.with_angle","title":"<code>with_angle(angle)</code>","text":"<p>Sets an angle in which range must a node be to be considered for connection.</p>"},{"location":"documentation/strategy_to_graph/#to_graph.strategy_to_graph.BuildStrategyForTimeseriesToGraph.with_limit","title":"<code>with_limit(limit)</code>","text":"<p>Sets a limit as to how many data instances two nodes must be apart to be considered for connection.</p>"},{"location":"documentation/strategy_to_graph/#to_graph.strategy_to_graph.BuildTimeseriesToGraphHorizontalVisibilityStrategy","title":"<code>BuildTimeseriesToGraphHorizontalVisibilityStrategy</code>","text":"<p>               Bases: <code>BuildStrategyForTimeseriesToGraph</code></p> <p>As initial strategy sets Horizontal visibility strategy.</p>"},{"location":"documentation/strategy_to_graph/#to_graph.strategy_to_graph.BuildTimeseriesToGraphNaturalVisibilityStrategy","title":"<code>BuildTimeseriesToGraphNaturalVisibilityStrategy</code>","text":"<p>               Bases: <code>BuildStrategyForTimeseriesToGraph</code></p> <p>As initial strategy sets Natural visibility strategy.</p>"},{"location":"documentation/strategy_to_graph/#to_graph.strategy_to_graph.BuildTimeseriesToGraphOrdinalPartition","title":"<code>BuildTimeseriesToGraphOrdinalPartition</code>","text":""},{"location":"documentation/strategy_to_graph/#to_graph.strategy_to_graph.BuildTimeseriesToGraphOrdinalPartition.get_strategy","title":"<code>get_strategy()</code>","text":"<p>Returns strategy.</p>"},{"location":"documentation/strategy_to_time_sequence/","title":"Converting graphs to sequences","text":""},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategyNextValueInNode","title":"<code>StrategyNextValueInNode</code>","text":"<p>Stores strategy to chose next value in the selected node.</p> <p>Attributes:</p> <ul> <li><code>skip</code>: tells us how many values do we skip before appending next one</li> </ul>"},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategyNextValueInNodeRandom","title":"<code>StrategyNextValueInNodeRandom</code>","text":"<p>               Bases: <code>StrategyNextValueInNode</code></p> <p>Chooses next value in selected node randomly.</p>"},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategyNextValueInNodeRandomForSlidingWindow","title":"<code>StrategyNextValueInNodeRandomForSlidingWindow</code>","text":"<p>               Bases: <code>StrategyNextValueInNode</code></p> <p>Chooses next value in selected node randomly in graph made with sliding window mechanism.</p>"},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategyNextValueInNodeRoundRobin","title":"<code>StrategyNextValueInNodeRoundRobin</code>","text":"<p>               Bases: <code>StrategyNextValueInNode</code></p> <p>Chooses next value in selected node sequentially, in the same order as they were saved.</p>"},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategyNextValueInNodeRoundRobinForSlidingWindow","title":"<code>StrategyNextValueInNodeRoundRobinForSlidingWindow</code>","text":"<p>               Bases: <code>StrategyNextValueInNode</code></p> <p>Chooses next value in selected node sequentially for graph made with sliding window mechanism, in the same order as they were saved.</p>"},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategySelectNextNode","title":"<code>StrategySelectNextNode</code>","text":"<p>Stores strategy to chose next node from the neighbors of the previous node.</p> <p>Attributes:</p> <ul> <li><code>change_graphs</code>: tells how long we walk through one graph, before switching to next one</li> <li><code>graph</code>: networkx.Graph object</li> </ul>"},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategySelectNextNodeRandomDegree","title":"<code>StrategySelectNextNodeRandomDegree</code>","text":"<p>               Bases: <code>StrategySelectNextNode</code></p> <p>Randomly chooses next node in graph based on a neighbor degree.</p>"},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategySelectNextNodeRandomWithRestart","title":"<code>StrategySelectNextNodeRandomWithRestart</code>","text":"<p>               Bases: <code>StrategySelectNextNode</code></p> <p>Randomly chooses next node with 15% chance of choosing the first node.</p>"},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategySelectNextNodeRandomly","title":"<code>StrategySelectNextNodeRandomly</code>","text":"<p>               Bases: <code>StrategySelectNextNode</code></p> <p>Randomly chooses next node from all nodes of the graph.</p>"},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs","title":"<code>StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs</code>","text":"<p>               Bases: <code>StrategySelectNextNode</code></p> <p>Walks through all graphs in a multivariate graph and chooses next node randomly.</p>"},{"location":"documentation/strategy_to_time_sequence/#from_graph.strategy_to_time_sequence.StrategySelectNextNodeRandomlyFromNeighboursFromFirstGraph","title":"<code>StrategySelectNextNodeRandomlyFromNeighboursFromFirstGraph</code>","text":"<p>               Bases: <code>StrategySelectNextNode</code></p> <p>Walks through first graph and chooses next node randomly.</p>"},{"location":"documentation/tsg_io/","title":"IO","text":""},{"location":"documentation/tsg_io/#csv-and-xml-files","title":"Csv and xml files:","text":""},{"location":"documentation/tsg_io/#tsg_io.input.CsvFile","title":"<code>CsvFile</code>","text":"<p>               Bases: <code>CsvRead</code></p> <p>Returns proccessed data from csv file sorted by \"Date\".</p> <p>Attributes:</p> <ul> <li><code>path</code>: path to csv file with data</li> <li><code>column</code>: which column of data do we extract</li> </ul>"},{"location":"documentation/tsg_io/#tsg_io.input.CsvFile.from_csv","title":"<code>from_csv()</code>","text":"<p>Extracts the data using set attributes.</p>"},{"location":"documentation/tsg_io/#tsg_io.input.CsvRead","title":"<code>CsvRead</code>","text":"<p>Extracts data from a csv file.</p>"},{"location":"documentation/tsg_io/#tsg_io.input.FundamentalsReportFinancialStatements","title":"<code>FundamentalsReportFinancialStatements</code>","text":"<p>               Bases: <code>XmlRead</code></p> <p>Extracting data from an xml file. Further explanation on file format can be found on: https://docs-2-0--quantrocket.netlify.app/data/reuters/</p> <p>Attributes:</p> <ul> <li><code>path</code>: path to csv file with data</li> <li><code>item</code>: which item are we observing</li> <li><code>season</code>: are we observing values annually or interim</li> </ul>"},{"location":"documentation/tsg_io/#tsg_io.input.FundamentalsReportFinancialStatements.from_xml","title":"<code>from_xml()</code>","text":"<p>Extracts the data using set attributes.</p>"},{"location":"documentation/tsg_io/#tsg_io.input.XmlRead","title":"<code>XmlRead</code>","text":"<p>Extracts data from an xml file.</p>"},{"location":"tutorial/tutorial-g2ts-strategies/","title":"Graph to timeseries generation strategies","text":"<p>There are two main components or strategies needed for timeseries generation:</p> In\u00a0[10]: Copied! <pre>import os\nimport sys\nnb_dir = os.path.split(os.getcwd())[0]\nif nb_dir not in sys.path:\n    sys.path.append(nb_dir)\n\n\nfrom core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingSlidingWindow, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph, ToSequenceVisitorSlidingWindow, ToSequenceVisitor, ToSequenceVisitorOrdinalPartition\nfrom tsg_io.input import CsvFile, TsFile\nfrom from_graph.strategy_to_time_sequence import StrategyNextValueInNodeRandom, StrategyNextValueInNodeRandomForSlidingWindow, StrategyNextValueInNodeRoundRobin, StrategyNextValueInNodeRoundRobinForSlidingWindow, StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs, StrategySelectNextNodeRandomlyFromNeighboursFromFirstGraph, StrategySelectNextNodeRandomly, StrategySelectNextNodeRandomDegree, StrategySelectNextNodeRandomWithRestart, StrategyNextValueInNodeOrdinalPartition\nfrom to_graph.strategy_linking_graph import StrategyLinkingGraphByValueWithinRange, LinkNodesWithinGraph\nfrom to_graph.strategy_linking_multi_graphs import LinkGraphs\nfrom to_graph.strategy_to_graph import BuildTimeseriesToGraphNaturalVisibilityStrategy, BuildTimeseriesToGraphHorizontalVisibilityStrategy, BuildTimeseriesToGraphOrdinalPartition\nimport warnings\nwarnings.filterwarnings('ignore')\namazon_path = os.path.join(os.getcwd(), \"amazon\", \"AMZN.csv\")\napple_path = os.path.join(os.getcwd(), \"apple\", \"APPLE.csv\")\n</pre> import os import sys nb_dir = os.path.split(os.getcwd())[0] if nb_dir not in sys.path:     sys.path.append(nb_dir)   from core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingSlidingWindow, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph, ToSequenceVisitorSlidingWindow, ToSequenceVisitor, ToSequenceVisitorOrdinalPartition from tsg_io.input import CsvFile, TsFile from from_graph.strategy_to_time_sequence import StrategyNextValueInNodeRandom, StrategyNextValueInNodeRandomForSlidingWindow, StrategyNextValueInNodeRoundRobin, StrategyNextValueInNodeRoundRobinForSlidingWindow, StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs, StrategySelectNextNodeRandomlyFromNeighboursFromFirstGraph, StrategySelectNextNodeRandomly, StrategySelectNextNodeRandomDegree, StrategySelectNextNodeRandomWithRestart, StrategyNextValueInNodeOrdinalPartition from to_graph.strategy_linking_graph import StrategyLinkingGraphByValueWithinRange, LinkNodesWithinGraph from to_graph.strategy_linking_multi_graphs import LinkGraphs from to_graph.strategy_to_graph import BuildTimeseriesToGraphNaturalVisibilityStrategy, BuildTimeseriesToGraphHorizontalVisibilityStrategy, BuildTimeseriesToGraphOrdinalPartition import warnings warnings.filterwarnings('ignore') amazon_path = os.path.join(os.getcwd(), \"amazon\", \"AMZN.csv\") apple_path = os.path.join(os.getcwd(), \"apple\", \"APPLE.csv\") In\u00a0[11]: Copied! <pre>timegraph_1 = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\\n    .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().with_limit(1).get_strategy())\\\n    .add_edge(0,2)\\\n    .add_edge(13, 21, weight = 17)\\\n    .link(LinkNodesWithinGraph().by_value(StrategyLinkingGraphByValueWithinRange(2)).seasonalities(15))\\\n    .draw()\n\ntimegraph_1.to_sequence(ToSequenceVisitor()\\\n        .next_node_strategy(StrategySelectNextNodeRandomWithRestart())\\\n        .next_value_strategy(StrategyNextValueInNodeRoundRobin().skip_every_x_steps(1))\\\n        .ts_length(100))\\\n    .draw_sequence()\n</pre> timegraph_1 = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\     .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().with_limit(1).get_strategy())\\     .add_edge(0,2)\\     .add_edge(13, 21, weight = 17)\\     .link(LinkNodesWithinGraph().by_value(StrategyLinkingGraphByValueWithinRange(2)).seasonalities(15))\\     .draw()  timegraph_1.to_sequence(ToSequenceVisitor()\\         .next_node_strategy(StrategySelectNextNodeRandomWithRestart())\\         .next_value_strategy(StrategyNextValueInNodeRoundRobin().skip_every_x_steps(1))\\         .ts_length(100))\\     .draw_sequence() Out[11]: <pre>&lt;core.model.TimeGraph at 0x20512cd3fe0&gt;</pre> In\u00a0[12]: Copied! <pre>timegraph_2 = Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingComposite()\\\n        .add(TimeseriesPreprocessingSegmentation(60, 120))\\\n        .add(TimeseriesPreprocessingSlidingWindow(5)))\\\n    .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().get_strategy())\\\n    .link(LinkGraphs().sliding_window())\\\n    .combine_identical_subgraphs()\\\n    .draw()\n\ntimegraph_2.to_sequence(ToSequenceVisitorSlidingWindow()\\\n        .next_node_strategy(StrategySelectNextNodeRandomWithRestart())\\\n        .next_value_strategy(StrategyNextValueInNodeRandomForSlidingWindow().skip_every_x_steps(1))\\\n        .ts_length(50))\\\n    .draw_sequence()\n</pre> timegraph_2 = Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingComposite()\\         .add(TimeseriesPreprocessingSegmentation(60, 120))\\         .add(TimeseriesPreprocessingSlidingWindow(5)))\\     .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().get_strategy())\\     .link(LinkGraphs().sliding_window())\\     .combine_identical_subgraphs()\\     .draw()  timegraph_2.to_sequence(ToSequenceVisitorSlidingWindow()\\         .next_node_strategy(StrategySelectNextNodeRandomWithRestart())\\         .next_value_strategy(StrategyNextValueInNodeRandomForSlidingWindow().skip_every_x_steps(1))\\         .ts_length(50))\\     .draw_sequence() Out[12]: <pre>&lt;core.model.TimeGraph at 0x2052897b3b0&gt;</pre> In\u00a0[13]: Copied! <pre>timegraph_3 = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 120))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(120, 180)))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(500, 560)))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(700, 760)))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(1000, 1060)))\\\n    .to_histogram(15)\\\n    .to_graph(BuildTimeseriesToGraphOrdinalPartition(10, 5).get_strategy())\\\n    .link(LinkGraphs().time_cooccurrence())\\\n    .add_edge(0,2)\\\n    .link(LinkNodesWithinGraph().seasonalities(4))\\\n    .draw()\n\ntimegraph_3.to_sequence(ToSequenceVisitorOrdinalPartition()\\\n        .next_node_strategy(StrategySelectNextNodeRandomWithRestart())\\\n        .next_value_strategy(StrategyNextValueInNodeOrdinalPartition())\\\n        .ts_length(100))\\\n    .draw_sequence()\n</pre> timegraph_3 = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 120))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(120, 180)))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(500, 560)))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(700, 760)))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(1000, 1060)))\\     .to_histogram(15)\\     .to_graph(BuildTimeseriesToGraphOrdinalPartition(10, 5).get_strategy())\\     .link(LinkGraphs().time_cooccurrence())\\     .add_edge(0,2)\\     .link(LinkNodesWithinGraph().seasonalities(4))\\     .draw()  timegraph_3.to_sequence(ToSequenceVisitorOrdinalPartition()\\         .next_node_strategy(StrategySelectNextNodeRandomWithRestart())\\         .next_value_strategy(StrategyNextValueInNodeOrdinalPartition())\\         .ts_length(100))\\     .draw_sequence() Out[13]: <pre>&lt;core.model.TimeGraph at 0x2052897b650&gt;</pre>"},{"location":"tutorial/tutorial-g2ts-strategies/#graph-to-timeseries-generation-strategies","title":"Graph to timeseries generation strategies\u00b6","text":"<p>We generate timeseries from univariate and multivariate graphs, by walking through the graph and appending values to our sequence.</p>"},{"location":"tutorial/tutorial-g2ts-strategies/#selection-of-next-node-in-graph","title":"Selection of next node in graph:\u00b6","text":""},{"location":"tutorial/tutorial-g2ts-strategies/#-strategyselectnextnoderandomly","title":"- StrategySelectNextNodeRandomly:\u00b6","text":"<p>First strategy and the simplest strategy we can have here is just randomly selecting next node from the pool of all appropriate nodes. (In univariate graphs, every node is appropriate, but in multivariate graph, only appropriate nodes are ones that originate from the univariate graph we are currently on)</p>"},{"location":"tutorial/tutorial-g2ts-strategies/#-strategyselectnextnoderandomlyfromneighboursacrossgraphs-and-strategyselectnextnoderandomlyfromneighboursfromfirstgraph","title":"- StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs and StrategySelectNextNodeRandomlyFromNeighboursFromFirstGraph:\u00b6","text":"<p>These strategies are very similar to one another. If we have univariate graph it does not matter which one we choose. Each of them will return random neighbour of the last node we analyzed.</p> <p>If we have a multivariate graph, the strategy from class  StrategySelectNextNodeRandomlyFromNeighboursFromFirstGraph will only walkthrough the first graph, while giving back neighbours of the last node we analyzed from each of the univariate graph in this multivariate one. StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs strategy on the other hand will continuously switch between univariate graphs and will not just remain on the first one. With this strategy we can also set, how long does the programme spend walking through each graph.</p>"},{"location":"tutorial/tutorial-g2ts-strategies/#-strategyselectnextnoderandomwithrestart","title":"- StrategySelectNextNodeRandomWithRestart:\u00b6","text":"<p>This strategy will choose next node randomly, just like StrategySelectNextNodeRandomly, but there will always be 15% chance that it will jump back to the first node of the graph.</p>"},{"location":"tutorial/tutorial-g2ts-strategies/#-strategyselectnextnoderandomdegree","title":"- StrategySelectNextNodeRandomDegree:\u00b6","text":"<p>This strategy will choose next node randomly from its neighbours based on degree/weight of the connection between the two.</p>"},{"location":"tutorial/tutorial-g2ts-strategies/#selection-of-next-value-in-the-selected-node","title":"Selection of next value in the selected node:\u00b6","text":"<p>Some strategies of graph generation, result in a single node having multiple values instead of just one. If nodes have only one value, you can just select any strategy that isn't specified to be for a certain type of graph.</p>"},{"location":"tutorial/tutorial-g2ts-strategies/#-strategynextvalueinnoderandom-and-strategynextvalueinnoderandomforslidingwindow","title":"- StrategyNextValueInNodeRandom and StrategyNextValueInNodeRandomForSlidingWindow:\u00b6","text":"<p>These two methods will choose next value from available ones randomly.</p>"},{"location":"tutorial/tutorial-g2ts-strategies/#-strategynextvalueinnoderoundrobin-and-strategynextvalueinnoderoundrobinforslidingwindow","title":"- StrategyNextValueInNodeRoundRobin and StrategyNextValueInNodeRoundRobinForSlidingWindow:\u00b6","text":"<p>These two methods will choose next value sequentially, in orther of their appearance in original graph. If last one is reached, it will start again at the beginning.</p>"},{"location":"tutorial/tutorial-g2ts-strategies/#-strategynextvalueinnodeordinalpartition","title":"- StrategyNextValueInNodeOrdinalPartition:\u00b6","text":"<p>This strategy is designed specifically for the ordinal partition graphs. As their nodes do not store original values, histogram of values is made at the beginning, which is later on used for value selection.</p>"},{"location":"tutorial/tutorial-g2ts-strategies/#additional-strategies","title":"Additional strategies:\u00b6","text":"<p>Along with these strategies we can also tell how many values we want to skip, between appending another one. We must also tell how long do we want our timeseries to be.</p>"},{"location":"tutorial/tutorial-g2ts-strategies/#examples","title":"Examples:\u00b6","text":"<p>Here are some examples of graphs and timeseries generated from them:</p>"},{"location":"tutorial/tutorial-ts2g-ordinal-partition/","title":"Ordinal partition graph","text":"<p>Ordinal patterns methods are based on the idea of a set of sequential patterns defined for a sequence of consecutive observations, where each node of the network represents one of the defined patterns and the edges are weighted according to the transition frequency between two consecutive patterns.</p> <p>(Silva, Vanessa Freitas, et al. \"Time series analysis via network science: Concepts and algorithms.\" Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery 11.3 (2021): e1404.)</p> <p></p> <p>Illustrative example of ordinal partition transition network algorithm. On the left side we illustrate the method of embedding with window size w = 3 and lag \u03c4 = 2 and the method of find its ordinal pattern, based in the amplitude rank of its elements. On the right side we show the resulting networks.</p> <p>Here is an example of ordinal partition graph made with our library:</p> In\u00a0[4]: Copied! <pre>import os\nimport sys\nnb_dir = os.path.split(os.getcwd())[0]\nif nb_dir not in sys.path:\n    sys.path.append(nb_dir)\n\nfrom core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph\nfrom tsg_io.input import CsvFile\nfrom to_graph.strategy_to_graph import BuildTimeseriesToGraphOrdinalPartition\nfrom to_graph.strategy_linking_multi_graphs import LinkGraphs\nimport warnings\nwarnings.filterwarnings('ignore')\n\namazon_path = os.path.join(os.getcwd(), \"amazon\", \"AMZN.csv\")\n</pre> import os import sys nb_dir = os.path.split(os.getcwd())[0] if nb_dir not in sys.path:     sys.path.append(nb_dir)  from core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph from tsg_io.input import CsvFile from to_graph.strategy_to_graph import BuildTimeseriesToGraphOrdinalPartition from to_graph.strategy_linking_multi_graphs import LinkGraphs import warnings warnings.filterwarnings('ignore')  amazon_path = os.path.join(os.getcwd(), \"amazon\", \"AMZN.csv\") In\u00a0[5]: Copied! <pre>timegraph_ordinal_partition = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\\n    .to_graph(BuildTimeseriesToGraphOrdinalPartition(3, 2).get_strategy())\\\n    .draw()\n</pre> timegraph_ordinal_partition = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\     .to_graph(BuildTimeseriesToGraphOrdinalPartition(3, 2).get_strategy())\\     .draw() In\u00a0[6]: Copied! <pre>multivariate_timegraph_ordinal_partition = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n         .with_preprocessing(TimeseriesPreprocessingSegmentation(100, 130)))\\\n    .to_graph(BuildTimeseriesToGraphOrdinalPartition(3, 2).get_strategy())\\\n    .link(LinkGraphs().time_cooccurrence())\\\n    .draw()\n</pre> multivariate_timegraph_ordinal_partition = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\          .with_preprocessing(TimeseriesPreprocessingSegmentation(100, 130)))\\     .to_graph(BuildTimeseriesToGraphOrdinalPartition(3, 2).get_strategy())\\     .link(LinkGraphs().time_cooccurrence())\\     .draw()"},{"location":"tutorial/tutorial-ts2g-ordinal-partition/#ordinal-partition-graph","title":"Ordinal partition graph\u00b6","text":""},{"location":"tutorial/tutorial-ts2g-proximity-networks/","title":"Proximity network graph","text":"<p>Mappings based on the concept of proximity use measures of distance or similarity to calculate the distance between the points of the time series incorporated in the multidimensional phase space. These methods map states of the time series into nodes of the network and create edges between those nodes based on some measure of distance or similarity.</p> <p>(Silva, Vanessa Freitas, et al. \"Time series analysis via network science: Concepts and algorithms.\" Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery 11.3 (2021): e1404.)</p> In\u00a0[1]: Copied! <pre>import os\nimport sys\nnb_dir = os.path.split(os.getcwd())[0]\nif nb_dir not in sys.path:\n    sys.path.append(nb_dir)\n\nfrom core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph\nfrom tsg_io.input import CsvFile\nfrom to_graph.strategy_to_graph import BuildTimeseriesToGraphProximityNetwork\nfrom to_graph.strategy_linking_multi_graphs import LinkGraphs\nimport warnings\nwarnings.filterwarnings('ignore')\n\namazon_path = os.path.join(os.getcwd(), \"amazon\", \"AMZN.csv\")\n</pre> import os import sys nb_dir = os.path.split(os.getcwd())[0] if nb_dir not in sys.path:     sys.path.append(nb_dir)  from core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph from tsg_io.input import CsvFile from to_graph.strategy_to_graph import BuildTimeseriesToGraphProximityNetwork from to_graph.strategy_linking_multi_graphs import LinkGraphs import warnings warnings.filterwarnings('ignore')  amazon_path = os.path.join(os.getcwd(), \"amazon\", \"AMZN.csv\") In\u00a0[2]: Copied! <pre>timegraph_cycle_network = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n         .with_preprocessing(TimeseriesPreprocessingSegmentation(120, 150)))\\\n    .to_graph(BuildTimeseriesToGraphProximityNetwork(method=\"cycle\").get_strategy())\\\n    .link(LinkGraphs().time_cooccurrence())\\\n    .draw()\n</pre> timegraph_cycle_network = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\          .with_preprocessing(TimeseriesPreprocessingSegmentation(120, 150)))\\     .to_graph(BuildTimeseriesToGraphProximityNetwork(method=\"cycle\").get_strategy())\\     .link(LinkGraphs().time_cooccurrence())\\     .draw() In\u00a0[3]: Copied! <pre>timegraph_correlation_network = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(90, 150))\\\n    .to_graph(BuildTimeseriesToGraphProximityNetwork(method=\"correlation\").get_strategy())\\\n    .draw()\n</pre> timegraph_correlation_network = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(90, 150))\\     .to_graph(BuildTimeseriesToGraphProximityNetwork(method=\"correlation\").get_strategy())\\     .draw() In\u00a0[4]: Copied! <pre>timegraph_recurrence_network = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(90, 120))\\\n    .to_graph(BuildTimeseriesToGraphProximityNetwork(method=\"recurrence\").get_strategy())\\\n    .draw()\n</pre> timegraph_recurrence_network = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(90, 120))\\     .to_graph(BuildTimeseriesToGraphProximityNetwork(method=\"recurrence\").get_strategy())\\     .draw() <pre>Checking edge (0, 1): distance = 0.25, epsilon = 0.5\nChecking edge (0, 3): distance = 0.45833299999999966, epsilon = 0.5\nChecking edge (0, 5): distance = 0.28645799999999966, epsilon = 0.5\nChecking edge (0, 9): distance = 0.5, epsilon = 0.5\nChecking edge (0, 20): distance = 0.19791700000000034, epsilon = 0.5\nChecking edge (0, 21): distance = 0.10416700000000034, epsilon = 0.5\nChecking edge (0, 22): distance = 0.125, epsilon = 0.5\nChecking edge (0, 23): distance = 0.40104200000000034, epsilon = 0.5\nChecking edge (0, 24): distance = 0.35416700000000034, epsilon = 0.5\nChecking edge (0, 25): distance = 0.32291700000000034, epsilon = 0.5\nChecking edge (0, 27): distance = 0.5, epsilon = 0.5\nChecking edge (0, 28): distance = 0.45833299999999966, epsilon = 0.5\nChecking edge (0, 29): distance = 0.44791700000000034, epsilon = 0.5\nChecking edge (1, 2): distance = 0.296875, epsilon = 0.5\nChecking edge (1, 3): distance = 0.20833299999999966, epsilon = 0.5\nChecking edge (1, 4): distance = 0.33333299999999966, epsilon = 0.5\nChecking edge (1, 5): distance = 0.03645799999999966, epsilon = 0.5\nChecking edge (1, 6): distance = 0.35416700000000034, epsilon = 0.5\nChecking edge (1, 7): distance = 0.36458299999999966, epsilon = 0.5\nChecking edge (1, 8): distance = 0.359375, epsilon = 0.5\nChecking edge (1, 9): distance = 0.25, epsilon = 0.5\nChecking edge (1, 10): distance = 0.31770799999999966, epsilon = 0.5\nChecking edge (1, 11): distance = 0.36979200000000034, epsilon = 0.5\nChecking edge (1, 13): distance = 0.4739580000000001, epsilon = 0.5\nChecking edge (1, 14): distance = 0.375, epsilon = 0.5\nChecking edge (1, 15): distance = 0.3958330000000001, epsilon = 0.5\nChecking edge (1, 16): distance = 0.453125, epsilon = 0.5\nChecking edge (1, 20): distance = 0.05208299999999966, epsilon = 0.5\nChecking edge (1, 21): distance = 0.14583299999999966, epsilon = 0.5\nChecking edge (1, 22): distance = 0.125, epsilon = 0.5\nChecking edge (1, 24): distance = 0.10416700000000034, epsilon = 0.5\nChecking edge (2, 3): distance = 0.08854200000000034, epsilon = 0.5\nChecking edge (2, 4): distance = 0.03645799999999966, epsilon = 0.5\nChecking edge (2, 5): distance = 0.26041700000000034, epsilon = 0.5\nChecking edge (2, 6): distance = 0.05729200000000034, epsilon = 0.5\nChecking edge (2, 7): distance = 0.06770799999999966, epsilon = 0.5\nChecking edge (2, 8): distance = 0.0625, epsilon = 0.5\nChecking edge (2, 9): distance = 0.046875, epsilon = 0.5\nChecking edge (2, 10): distance = 0.020832999999999657, epsilon = 0.5\nChecking edge (2, 11): distance = 0.07291700000000034, epsilon = 0.5\nChecking edge (2, 12): distance = 0.328125, epsilon = 0.5\nChecking edge (2, 13): distance = 0.1770830000000001, epsilon = 0.5\nChecking edge (2, 14): distance = 0.078125, epsilon = 0.5\nChecking edge (2, 15): distance = 0.0989580000000001, epsilon = 0.5\nChecking edge (2, 16): distance = 0.15625, epsilon = 0.5\nChecking edge (2, 17): distance = 0.453125, epsilon = 0.5\nChecking edge (2, 18): distance = 0.453125, epsilon = 0.5\nChecking edge (2, 19): distance = 0.2552080000000001, epsilon = 0.5\nChecking edge (2, 20): distance = 0.34895799999999966, epsilon = 0.5\nChecking edge (2, 21): distance = 0.44270799999999966, epsilon = 0.5\nChecking edge (2, 22): distance = 0.421875, epsilon = 0.5\nChecking edge (2, 24): distance = 0.19270799999999966, epsilon = 0.5\nChecking edge (3, 4): distance = 0.125, epsilon = 0.5\nChecking edge (3, 5): distance = 0.171875, epsilon = 0.5\nChecking edge (3, 6): distance = 0.14583400000000069, epsilon = 0.5\nChecking edge (3, 7): distance = 0.15625, epsilon = 0.5\nChecking edge (3, 8): distance = 0.15104200000000034, epsilon = 0.5\nChecking edge (3, 9): distance = 0.04166700000000034, epsilon = 0.5\nChecking edge (3, 10): distance = 0.109375, epsilon = 0.5\nChecking edge (3, 11): distance = 0.16145900000000069, epsilon = 0.5\nChecking edge (3, 12): distance = 0.41666700000000034, epsilon = 0.5\nChecking edge (3, 13): distance = 0.26562500000000044, epsilon = 0.5\nChecking edge (3, 14): distance = 0.16666700000000034, epsilon = 0.5\nChecking edge (3, 15): distance = 0.18750000000000044, epsilon = 0.5\nChecking edge (3, 16): distance = 0.24479200000000034, epsilon = 0.5\nChecking edge (3, 19): distance = 0.34375000000000044, epsilon = 0.5\nChecking edge (3, 20): distance = 0.2604159999999993, epsilon = 0.5\nChecking edge (3, 21): distance = 0.3541659999999993, epsilon = 0.5\nChecking edge (3, 22): distance = 0.33333299999999966, epsilon = 0.5\nChecking edge (3, 24): distance = 0.10416599999999931, epsilon = 0.5\nChecking edge (4, 5): distance = 0.296875, epsilon = 0.5\nChecking edge (4, 6): distance = 0.020834000000000685, epsilon = 0.5\nChecking edge (4, 7): distance = 0.03125, epsilon = 0.5\nChecking edge (4, 8): distance = 0.026042000000000343, epsilon = 0.5\nChecking edge (4, 9): distance = 0.08333299999999966, epsilon = 0.5\nChecking edge (4, 10): distance = 0.015625, epsilon = 0.5\nChecking edge (4, 11): distance = 0.036459000000000685, epsilon = 0.5\nChecking edge (4, 12): distance = 0.29166700000000034, epsilon = 0.5\nChecking edge (4, 13): distance = 0.14062500000000044, epsilon = 0.5\nChecking edge (4, 14): distance = 0.04166700000000034, epsilon = 0.5\nChecking edge (4, 15): distance = 0.06250000000000044, epsilon = 0.5\nChecking edge (4, 16): distance = 0.11979200000000034, epsilon = 0.5\nChecking edge (4, 17): distance = 0.41666700000000034, epsilon = 0.5\nChecking edge (4, 18): distance = 0.41666700000000034, epsilon = 0.5\nChecking edge (4, 19): distance = 0.21875000000000044, epsilon = 0.5\nChecking edge (4, 20): distance = 0.3854159999999993, epsilon = 0.5\nChecking edge (4, 21): distance = 0.4791659999999993, epsilon = 0.5\nChecking edge (4, 22): distance = 0.45833299999999966, epsilon = 0.5\nChecking edge (4, 24): distance = 0.22916599999999931, epsilon = 0.5\nChecking edge (5, 6): distance = 0.3177090000000007, epsilon = 0.5\nChecking edge (5, 7): distance = 0.328125, epsilon = 0.5\nChecking edge (5, 8): distance = 0.32291700000000034, epsilon = 0.5\nChecking edge (5, 9): distance = 0.21354200000000034, epsilon = 0.5\nChecking edge (5, 10): distance = 0.28125, epsilon = 0.5\nChecking edge (5, 11): distance = 0.3333340000000007, epsilon = 0.5\nChecking edge (5, 13): distance = 0.43750000000000044, epsilon = 0.5\nChecking edge (5, 14): distance = 0.33854200000000034, epsilon = 0.5\nChecking edge (5, 15): distance = 0.35937500000000044, epsilon = 0.5\nChecking edge (5, 16): distance = 0.41666700000000034, epsilon = 0.5\nChecking edge (5, 20): distance = 0.08854099999999931, epsilon = 0.5\nChecking edge (5, 21): distance = 0.18229099999999931, epsilon = 0.5\nChecking edge (5, 22): distance = 0.16145799999999966, epsilon = 0.5\nChecking edge (5, 24): distance = 0.06770900000000069, epsilon = 0.5\nChecking edge (6, 7): distance = 0.010415999999999315, epsilon = 0.5\nChecking edge (6, 8): distance = 0.005207999999999657, epsilon = 0.5\nChecking edge (6, 9): distance = 0.10416700000000034, epsilon = 0.5\nChecking edge (6, 10): distance = 0.036459000000000685, epsilon = 0.5\nChecking edge (6, 11): distance = 0.015625, epsilon = 0.5\nChecking edge (6, 12): distance = 0.27083299999999966, epsilon = 0.5\nChecking edge (6, 13): distance = 0.11979099999999976, epsilon = 0.5\nChecking edge (6, 14): distance = 0.020832999999999657, epsilon = 0.5\nChecking edge (6, 15): distance = 0.04166599999999976, epsilon = 0.5\nChecking edge (6, 16): distance = 0.09895799999999966, epsilon = 0.5\nChecking edge (6, 17): distance = 0.39583299999999966, epsilon = 0.5\nChecking edge (6, 18): distance = 0.39583299999999966, epsilon = 0.5\nChecking edge (6, 19): distance = 0.19791599999999976, epsilon = 0.5\nChecking edge (6, 20): distance = 0.40625, epsilon = 0.5\nChecking edge (6, 21): distance = 0.5, epsilon = 0.5\nChecking edge (6, 22): distance = 0.47916700000000034, epsilon = 0.5\nChecking edge (6, 24): distance = 0.25, epsilon = 0.5\nChecking edge (7, 8): distance = 0.005207999999999657, epsilon = 0.5\nChecking edge (7, 9): distance = 0.11458299999999966, epsilon = 0.5\nChecking edge (7, 10): distance = 0.046875, epsilon = 0.5\nChecking edge (7, 11): distance = 0.005209000000000685, epsilon = 0.5\nChecking edge (7, 12): distance = 0.26041700000000034, epsilon = 0.5\nChecking edge (7, 13): distance = 0.10937500000000044, epsilon = 0.5\nChecking edge (7, 14): distance = 0.010417000000000343, epsilon = 0.5\nChecking edge (7, 15): distance = 0.031250000000000444, epsilon = 0.5\nChecking edge (7, 16): distance = 0.08854200000000034, epsilon = 0.5\nChecking edge (7, 17): distance = 0.38541700000000034, epsilon = 0.5\nChecking edge (7, 18): distance = 0.38541700000000034, epsilon = 0.5\nChecking edge (7, 19): distance = 0.18750000000000044, epsilon = 0.5\nChecking edge (7, 20): distance = 0.4166659999999993, epsilon = 0.5\nChecking edge (7, 22): distance = 0.48958299999999966, epsilon = 0.5\nChecking edge (7, 24): distance = 0.2604159999999993, epsilon = 0.5\nChecking edge (8, 9): distance = 0.109375, epsilon = 0.5\nChecking edge (8, 10): distance = 0.04166700000000034, epsilon = 0.5\nChecking edge (8, 11): distance = 0.010417000000000343, epsilon = 0.5\nChecking edge (8, 12): distance = 0.265625, epsilon = 0.5\nChecking edge (8, 13): distance = 0.1145830000000001, epsilon = 0.5\nChecking edge (8, 14): distance = 0.015625, epsilon = 0.5\nChecking edge (8, 15): distance = 0.0364580000000001, epsilon = 0.5\nChecking edge (8, 16): distance = 0.09375, epsilon = 0.5\nChecking edge (8, 17): distance = 0.390625, epsilon = 0.5\nChecking edge (8, 18): distance = 0.390625, epsilon = 0.5\nChecking edge (8, 19): distance = 0.1927080000000001, epsilon = 0.5\nChecking edge (8, 20): distance = 0.41145799999999966, epsilon = 0.5\nChecking edge (8, 22): distance = 0.484375, epsilon = 0.5\nChecking edge (8, 24): distance = 0.25520799999999966, epsilon = 0.5\nChecking edge (9, 10): distance = 0.06770799999999966, epsilon = 0.5\nChecking edge (9, 11): distance = 0.11979200000000034, epsilon = 0.5\nChecking edge (9, 12): distance = 0.375, epsilon = 0.5\nChecking edge (9, 13): distance = 0.2239580000000001, epsilon = 0.5\nChecking edge (9, 14): distance = 0.125, epsilon = 0.5\nChecking edge (9, 15): distance = 0.1458330000000001, epsilon = 0.5\nChecking edge (9, 16): distance = 0.203125, epsilon = 0.5\nChecking edge (9, 17): distance = 0.5, epsilon = 0.5\nChecking edge (9, 18): distance = 0.5, epsilon = 0.5\nChecking edge (9, 19): distance = 0.3020830000000001, epsilon = 0.5\nChecking edge (9, 20): distance = 0.30208299999999966, epsilon = 0.5\nChecking edge (9, 21): distance = 0.39583299999999966, epsilon = 0.5\nChecking edge (9, 22): distance = 0.375, epsilon = 0.5\nChecking edge (9, 24): distance = 0.14583299999999966, epsilon = 0.5\nChecking edge (10, 11): distance = 0.052084000000000685, epsilon = 0.5\nChecking edge (10, 12): distance = 0.30729200000000034, epsilon = 0.5\nChecking edge (10, 13): distance = 0.15625000000000044, epsilon = 0.5\nChecking edge (10, 14): distance = 0.05729200000000034, epsilon = 0.5\nChecking edge (10, 15): distance = 0.07812500000000044, epsilon = 0.5\nChecking edge (10, 16): distance = 0.13541700000000034, epsilon = 0.5\nChecking edge (10, 17): distance = 0.43229200000000034, epsilon = 0.5\nChecking edge (10, 18): distance = 0.43229200000000034, epsilon = 0.5\nChecking edge (10, 19): distance = 0.23437500000000044, epsilon = 0.5\nChecking edge (10, 20): distance = 0.3697909999999993, epsilon = 0.5\nChecking edge (10, 21): distance = 0.4635409999999993, epsilon = 0.5\nChecking edge (10, 22): distance = 0.44270799999999966, epsilon = 0.5\nChecking edge (10, 24): distance = 0.21354099999999931, epsilon = 0.5\nChecking edge (11, 12): distance = 0.25520799999999966, epsilon = 0.5\nChecking edge (11, 13): distance = 0.10416599999999976, epsilon = 0.5\nChecking edge (11, 14): distance = 0.005207999999999657, epsilon = 0.5\nChecking edge (11, 15): distance = 0.02604099999999976, epsilon = 0.5\nChecking edge (11, 16): distance = 0.08333299999999966, epsilon = 0.5\nChecking edge (11, 17): distance = 0.38020799999999966, epsilon = 0.5\nChecking edge (11, 18): distance = 0.38020799999999966, epsilon = 0.5\nChecking edge (11, 19): distance = 0.18229099999999976, epsilon = 0.5\nChecking edge (11, 20): distance = 0.421875, epsilon = 0.5\nChecking edge (11, 22): distance = 0.49479200000000034, epsilon = 0.5\nChecking edge (11, 24): distance = 0.265625, epsilon = 0.5\nChecking edge (12, 13): distance = 0.1510419999999999, epsilon = 0.5\nChecking edge (12, 14): distance = 0.25, epsilon = 0.5\nChecking edge (12, 15): distance = 0.2291669999999999, epsilon = 0.5\nChecking edge (12, 16): distance = 0.171875, epsilon = 0.5\nChecking edge (12, 17): distance = 0.125, epsilon = 0.5\nChecking edge (12, 18): distance = 0.125, epsilon = 0.5\nChecking edge (12, 19): distance = 0.0729169999999999, epsilon = 0.5\nChecking edge (13, 14): distance = 0.0989580000000001, epsilon = 0.5\nChecking edge (13, 15): distance = 0.078125, epsilon = 0.5\nChecking edge (13, 16): distance = 0.0208330000000001, epsilon = 0.5\nChecking edge (13, 17): distance = 0.2760419999999999, epsilon = 0.5\nChecking edge (13, 18): distance = 0.2760419999999999, epsilon = 0.5\nChecking edge (13, 19): distance = 0.078125, epsilon = 0.5\nChecking edge (13, 24): distance = 0.36979099999999976, epsilon = 0.5\nChecking edge (14, 15): distance = 0.0208330000000001, epsilon = 0.5\nChecking edge (14, 16): distance = 0.078125, epsilon = 0.5\nChecking edge (14, 17): distance = 0.375, epsilon = 0.5\nChecking edge (14, 18): distance = 0.375, epsilon = 0.5\nChecking edge (14, 19): distance = 0.1770830000000001, epsilon = 0.5\nChecking edge (14, 20): distance = 0.42708299999999966, epsilon = 0.5\nChecking edge (14, 22): distance = 0.5, epsilon = 0.5\nChecking edge (14, 24): distance = 0.27083299999999966, epsilon = 0.5\nChecking edge (15, 16): distance = 0.0572919999999999, epsilon = 0.5\nChecking edge (15, 17): distance = 0.3541669999999999, epsilon = 0.5\nChecking edge (15, 18): distance = 0.3541669999999999, epsilon = 0.5\nChecking edge (15, 19): distance = 0.15625, epsilon = 0.5\nChecking edge (15, 20): distance = 0.44791599999999976, epsilon = 0.5\nChecking edge (15, 24): distance = 0.29166599999999976, epsilon = 0.5\nChecking edge (16, 17): distance = 0.296875, epsilon = 0.5\nChecking edge (16, 18): distance = 0.296875, epsilon = 0.5\nChecking edge (16, 19): distance = 0.0989580000000001, epsilon = 0.5\nChecking edge (16, 24): distance = 0.34895799999999966, epsilon = 0.5\nChecking edge (17, 18): distance = 0.0, epsilon = 0.5\nChecking edge (17, 19): distance = 0.1979169999999999, epsilon = 0.5\nChecking edge (18, 19): distance = 0.1979169999999999, epsilon = 0.5\nChecking edge (19, 24): distance = 0.44791599999999976, epsilon = 0.5\nChecking edge (20, 21): distance = 0.09375, epsilon = 0.5\nChecking edge (20, 22): distance = 0.07291700000000034, epsilon = 0.5\nChecking edge (20, 24): distance = 0.15625, epsilon = 0.5\nChecking edge (21, 22): distance = 0.020832999999999657, epsilon = 0.5\nChecking edge (21, 24): distance = 0.25, epsilon = 0.5\nChecking edge (21, 25): distance = 0.4270840000000007, epsilon = 0.5\nChecking edge (22, 24): distance = 0.22916700000000034, epsilon = 0.5\nChecking edge (22, 25): distance = 0.44791700000000034, epsilon = 0.5\nChecking edge (23, 25): distance = 0.078125, epsilon = 0.5\nChecking edge (23, 26): distance = 0.36458299999999966, epsilon = 0.5\nChecking edge (23, 27): distance = 0.09895799999999966, epsilon = 0.5\nChecking edge (23, 28): distance = 0.057290999999999315, epsilon = 0.5\nChecking edge (23, 29): distance = 0.046875, epsilon = 0.5\nChecking edge (25, 26): distance = 0.44270799999999966, epsilon = 0.5\nChecking edge (25, 27): distance = 0.17708299999999966, epsilon = 0.5\nChecking edge (25, 28): distance = 0.13541599999999931, epsilon = 0.5\nChecking edge (25, 29): distance = 0.125, epsilon = 0.5\nChecking edge (26, 27): distance = 0.265625, epsilon = 0.5\nChecking edge (26, 28): distance = 0.30729200000000034, epsilon = 0.5\nChecking edge (26, 29): distance = 0.31770799999999966, epsilon = 0.5\nChecking edge (27, 28): distance = 0.04166700000000034, epsilon = 0.5\nChecking edge (27, 29): distance = 0.05208299999999966, epsilon = 0.5\nChecking edge (28, 29): distance = 0.010415999999999315, epsilon = 0.5\n</pre>"},{"location":"tutorial/tutorial-ts2g-proximity-networks/#proximity-network-graph","title":"Proximity network graph\u00b6","text":""},{"location":"tutorial/tutorial-ts2g-proximity-networks/#cycle-networks","title":"Cycle networks\u00b6","text":""},{"location":"tutorial/tutorial-ts2g-proximity-networks/#correlation-networks","title":"Correlation networks\u00b6","text":""},{"location":"tutorial/tutorial-ts2g-proximity-networks/#recurrence-networks","title":"Recurrence networks\u00b6","text":""},{"location":"tutorial/tutorial-ts2g-quantiles/","title":"Quantiles graph","text":"<p>In the construction of quantile graphs the bins are defined by Q quantiles, q1, q2, ..., qQ. Each quantile, qi, is associated to a node vi of the graph so the graph has as many nodes as the number of quantiles. Two nodes vi and vj are connected by a weighted directed edge (vi, vj , wi,j ), where the weight wi,j represents the transition probability between quantile ranges.</p> <p>(Silva, Vanessa Freitas, et al. \"Time series analysis via network science: Concepts and algorithms.\" Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery 11.3 (2021): e1404.)</p> <p></p> <p>Illustrative example of the quantile graph algorithm for Q = 4. On the left panel we present the plot of a toy time series and on the right panel the network generated by the quantile graph algorithm. The different colors in the time series plot represent the regions corresponding to the different quantiles. In the network, edges with larger weights represented by thicker lines correspond to the repeated transitions between quantiles.</p> <p>Here is an example of quantile graph made with our library:</p> In\u00a0[1]: Copied! <pre>import os\nimport sys\nnb_dir = os.path.split(os.getcwd())[0]\nif nb_dir not in sys.path:\n    sys.path.append(nb_dir)\n\nfrom core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph\nfrom tsg_io.input import CsvFile\nfrom to_graph.strategy_to_graph import BuildTimeseriesToGraphQuantile\nfrom to_graph.strategy_linking_multi_graphs import LinkGraphs\nimport warnings\nwarnings.filterwarnings('ignore')\n\namazon_path = os.path.join(os.getcwd(), \"amazon\", \"AMZN.csv\")\n</pre> import os import sys nb_dir = os.path.split(os.getcwd())[0] if nb_dir not in sys.path:     sys.path.append(nb_dir)  from core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph from tsg_io.input import CsvFile from to_graph.strategy_to_graph import BuildTimeseriesToGraphQuantile from to_graph.strategy_linking_multi_graphs import LinkGraphs import warnings warnings.filterwarnings('ignore')  amazon_path = os.path.join(os.getcwd(), \"amazon\", \"AMZN.csv\") In\u00a0[2]: Copied! <pre>timegraph_quantile = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 120))\\\n    .to_graph(BuildTimeseriesToGraphQuantile(4, 1).get_strategy())\\\n    .draw()\n</pre> timegraph_quantile = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 120))\\     .to_graph(BuildTimeseriesToGraphQuantile(4, 1).get_strategy())\\     .draw() In\u00a0[3]: Copied! <pre>multivariate_timegraph_quantile = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 120))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n         .with_preprocessing(TimeseriesPreprocessingSegmentation(100, 160)))\\\n    .to_graph(BuildTimeseriesToGraphQuantile(5, 2).get_strategy())\\\n    .link(LinkGraphs().time_cooccurrence())\\\n    .draw()\n</pre> multivariate_timegraph_quantile = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 120))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\          .with_preprocessing(TimeseriesPreprocessingSegmentation(100, 160)))\\     .to_graph(BuildTimeseriesToGraphQuantile(5, 2).get_strategy())\\     .link(LinkGraphs().time_cooccurrence())\\     .draw()"},{"location":"tutorial/tutorial-ts2g-quantiles/#quantiles-graph","title":"Quantiles graph\u00b6","text":""},{"location":"tutorial/tutorial-ts2g-sliding-window-strategy/","title":"Sliding window graph","text":"<p>Sliding window graph is a special type of graph, that is made of multiple subgraphs, connected in sequential order.</p> <p>We take our segment of a timeseries, and disect it into smaller segments with sliding window technique. Then we transform these segments of timeseries into graphs, using provided strategy, treat these graphs as nodes and sequentially connect them to form new snake like graph. This graph has for nodes subgraphs, each with the same number of nodes. Then we can combine identical subgraphs (subgraphs that have same edges) and we have our completed sliding window graph.</p> In\u00a0[1]: Copied! <pre>import os\nimport sys\nnb_dir = os.path.split(os.getcwd())[0]\nif nb_dir not in sys.path:\n    sys.path.append(nb_dir)\n\nfrom core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingSlidingWindow, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph\nfrom tsg_io.input import CsvFile\nfrom to_graph.strategy_linking_multi_graphs import LinkGraphs\nfrom to_graph.strategy_to_graph import BuildTimeseriesToGraphNaturalVisibilityStrategy, BuildTimeseriesToGraphHorizontalVisibilityStrategy\nimport warnings\nwarnings.filterwarnings('ignore')\n\namazon_path = os.path.join(os.getcwd(), \"amazon\", \"AMZN.csv\")\n</pre> import os import sys nb_dir = os.path.split(os.getcwd())[0] if nb_dir not in sys.path:     sys.path.append(nb_dir)  from core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingSlidingWindow, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph from tsg_io.input import CsvFile from to_graph.strategy_linking_multi_graphs import LinkGraphs from to_graph.strategy_to_graph import BuildTimeseriesToGraphNaturalVisibilityStrategy, BuildTimeseriesToGraphHorizontalVisibilityStrategy import warnings warnings.filterwarnings('ignore')  amazon_path = os.path.join(os.getcwd(), \"amazon\", \"AMZN.csv\") In\u00a0[2]: Copied! <pre>sliding_window_timegraph = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingComposite()\\\n        .add(TimeseriesPreprocessingSegmentation(100, 300))\\\n        .add(TimeseriesPreprocessingSlidingWindow(5)))\\\n    .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().get_strategy())\\\n    .link(LinkGraphs().sliding_window())\\\n    .combine_identical_subgraphs()\\\n    .draw()\n</pre> sliding_window_timegraph = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingComposite()\\         .add(TimeseriesPreprocessingSegmentation(100, 300))\\         .add(TimeseriesPreprocessingSlidingWindow(5)))\\     .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().get_strategy())\\     .link(LinkGraphs().sliding_window())\\     .combine_identical_subgraphs()\\     .draw()"},{"location":"tutorial/tutorial-ts2g-sliding-window-strategy/#sliding-window-graph","title":"Sliding window graph\u00b6","text":""},{"location":"tutorial/tutorial-ts2g-sliding-window-strategy/#creation-process","title":"Creation process\u00b6","text":""},{"location":"tutorial/tutorial-ts2g-sliding-window-strategy/#example","title":"Example:\u00b6","text":""},{"location":"tutorial/tutorial-ts2g-timeseries-correlation/","title":"Timeseries correlation","text":"<p>One of ways of comparing timeseries between themselves, can be explored with help of timeseries to graph conversion techniques:</p> <p>Firstly we can convert timeseries into a single node, and connect different nodes, each representing their own series, with edge weight being equal to the correlation between two timeseries. Here we will demonstrate using Person correlation technique.</p> In\u00a0[16]: Copied! <pre>import os\nimport sys\nnb_dir = os.path.split(os.getcwd())[0]\nif nb_dir not in sys.path:\n    sys.path.append(nb_dir)\n\nfrom core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingSlidingWindow, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph\nfrom tsg_io.input import CsvFile\nfrom to_graph.strategy_to_graph import BuildTimeseriesToGraphPearsonCorrelation, BuildTimeseriesToGraphNaturalVisibilityStrategy\nfrom to_graph.strategy_linking_multi_graphs import LinkGraphs, PearsonCorrelation\nimport warnings\nwarnings.filterwarnings('ignore')\n\namazon_path = os.path.join(os.getcwd(), \"amazon\", \"AMZN.csv\")\n</pre> import os import sys nb_dir = os.path.split(os.getcwd())[0] if nb_dir not in sys.path:     sys.path.append(nb_dir)  from core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingSlidingWindow, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph from tsg_io.input import CsvFile from to_graph.strategy_to_graph import BuildTimeseriesToGraphPearsonCorrelation, BuildTimeseriesToGraphNaturalVisibilityStrategy from to_graph.strategy_linking_multi_graphs import LinkGraphs, PearsonCorrelation import warnings warnings.filterwarnings('ignore')  amazon_path = os.path.join(os.getcwd(), \"amazon\", \"AMZN.csv\") In\u00a0[17]: Copied! <pre>timegraph_pearson_correlation = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(120, 150)))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(180, 210)))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(240, 270)))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(300, 330)))\\\n    .to_graph(BuildTimeseriesToGraphPearsonCorrelation().get_strategy())\\\n    .link(LinkGraphs().correlation(PearsonCorrelation()))\\\n    .draw()\n</pre> timegraph_pearson_correlation = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(120, 150)))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(180, 210)))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(240, 270)))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(300, 330)))\\     .to_graph(BuildTimeseriesToGraphPearsonCorrelation().get_strategy())\\     .link(LinkGraphs().correlation(PearsonCorrelation()))\\     .draw() In\u00a0[18]: Copied! <pre>timegraph_pearson_correlation_sliding_window = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingComposite()\\\n        .add(TimeseriesPreprocessingSegmentation(60, 80))\\\n        .add(TimeseriesPreprocessingSlidingWindow(5)))\\\n    .to_graph(BuildTimeseriesToGraphPearsonCorrelation().get_strategy())\\\n    .link(LinkGraphs().correlation_sliding_window(PearsonCorrelation()))\\\n    .draw()\n</pre> timegraph_pearson_correlation_sliding_window = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingComposite()\\         .add(TimeseriesPreprocessingSegmentation(60, 80))\\         .add(TimeseriesPreprocessingSlidingWindow(5)))\\     .to_graph(BuildTimeseriesToGraphPearsonCorrelation().get_strategy())\\     .link(LinkGraphs().correlation_sliding_window(PearsonCorrelation()))\\     .draw() <p>we can use same mechanism on multiple different timeseries and compare equally positioned windows of data:</p> In\u00a0[19]: Copied! <pre>timegraph_pearson_correlation_sliding_window = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingComposite()\\\n        .add(TimeseriesPreprocessingSegmentation(60, 70))\\\n        .add(TimeseriesPreprocessingSlidingWindow(5)))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingComposite()\\\n            .add(TimeseriesPreprocessingSegmentation(120, 130))\\\n            .add(TimeseriesPreprocessingSlidingWindow(5))))\\\n    .to_graph(BuildTimeseriesToGraphPearsonCorrelation().get_strategy())\\\n    .link(LinkGraphs().correlation_sliding_window(PearsonCorrelation()).positional_correlation_sliding_window(PearsonCorrelation()))\\\n    .draw()\n</pre> timegraph_pearson_correlation_sliding_window = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingComposite()\\         .add(TimeseriesPreprocessingSegmentation(60, 70))\\         .add(TimeseriesPreprocessingSlidingWindow(5)))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingComposite()\\             .add(TimeseriesPreprocessingSegmentation(120, 130))\\             .add(TimeseriesPreprocessingSlidingWindow(5))))\\     .to_graph(BuildTimeseriesToGraphPearsonCorrelation().get_strategy())\\     .link(LinkGraphs().correlation_sliding_window(PearsonCorrelation()).positional_correlation_sliding_window(PearsonCorrelation()))\\     .draw() <p>We also provide method that, connects multiple visibility graphs into one multivariate one based on dynamic time warping. Speciality of this method is, that you do not need to provide graphs / timeseries of the same length for it to work.</p> In\u00a0[20]: Copied! <pre>timegraph_dtw = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(90, 130)))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(130, 200)))\\\n    .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().with_limit(1).get_strategy())\\\n    .link(LinkGraphs().dynamic_timewarping())\\\n    .draw()\n</pre> timegraph_dtw = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(90, 130)))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(130, 200)))\\     .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().with_limit(1).get_strategy())\\     .link(LinkGraphs().dynamic_timewarping())\\     .draw()"},{"location":"tutorial/tutorial-ts2g-timeseries-correlation/#timeseries-correlation","title":"Timeseries correlation\u00b6","text":""},{"location":"tutorial/tutorial-ts2g-timeseries-correlation/#comparing-whole-segment","title":"Comparing whole segment\u00b6","text":""},{"location":"tutorial/tutorial-ts2g-timeseries-correlation/#comparing-segments-using-sliding-window-mechanism","title":"Comparing segments using sliding window mechanism\u00b6","text":""},{"location":"tutorial/tutorial-ts2g-timeseries-correlation/#connecting-multivariate-visibility-graph-based-on-dynamic-time-warping","title":"Connecting multivariate visibility graph based on dynamic time warping\u00b6","text":""},{"location":"tutorial/tutorial-ts2g-visibility-strategy/","title":"Natural and horizontal visibility graphs","text":"<p>Here is an example of natural visibility graph made with our library:</p> In\u00a0[1]: Copied! <pre>import os\nimport sys\nnb_dir = os.path.split(os.getcwd())[0]\nif nb_dir not in sys.path:\n    sys.path.append(nb_dir)\n\nfrom core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph\nfrom tsg_io.input import CsvFile\nfrom to_graph.strategy_to_graph import BuildTimeseriesToGraphNaturalVisibilityStrategy, BuildTimeseriesToGraphHorizontalVisibilityStrategy\nimport warnings\nwarnings.filterwarnings('ignore')\n\namazon_path = os.path.join(os.getcwd(), \"amazon\", \"AMZN.csv\")\n</pre> import os import sys nb_dir = os.path.split(os.getcwd())[0] if nb_dir not in sys.path:     sys.path.append(nb_dir)  from core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph from tsg_io.input import CsvFile from to_graph.strategy_to_graph import BuildTimeseriesToGraphNaturalVisibilityStrategy, BuildTimeseriesToGraphHorizontalVisibilityStrategy import warnings warnings.filterwarnings('ignore')  amazon_path = os.path.join(os.getcwd(), \"amazon\", \"AMZN.csv\") In\u00a0[2]: Copied! <pre>timegraph_natural_visibility = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\\n    .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().get_strategy())\\\n    .draw()\n</pre> timegraph_natural_visibility = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\     .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().get_strategy())\\     .draw() <p></p> <p>The green lines represent the horizontal lines of visibility between the data points and the purple lines the natural visibility, to comparison.</p> <p>Here is an example of natural visibility graph made with our library:</p> In\u00a0[3]: Copied! <pre>timegraph_horizontal_visibility = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\\n    .to_graph(BuildTimeseriesToGraphHorizontalVisibilityStrategy().get_strategy())\\\n    .draw()\n</pre> timegraph_horizontal_visibility = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\     .to_graph(BuildTimeseriesToGraphHorizontalVisibilityStrategy().get_strategy())\\     .draw() In\u00a0[4]: Copied! <pre>timegraph_natural_visibility_with_angle = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\\n    .to_graph(BuildTimeseriesToGraphHorizontalVisibilityStrategy().with_angle(0.09).get_strategy())\\\n    .draw()\n</pre> timegraph_natural_visibility_with_angle = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\     .to_graph(BuildTimeseriesToGraphHorizontalVisibilityStrategy().with_angle(0.09).get_strategy())\\     .draw() <p></p> <p>Illustrative example of limited penetrable visibility graph algorithm where the limit l = 1. The purple lines show the edges between points that have direct visibility (as in natural visibility graph, l = 0) and the blue dashed lines are the extra edges imposed by limit algorithm, where two points can be seen with only one higher intermediate point.</p> <p>(Silva, Vanessa Freitas, et al. \"Time series analysis via network science: Concepts and algorithms.\" Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery 11.3 (2021): e1404.)</p> In\u00a0[5]: Copied! <pre>timegraph_natural_visibility_with_limit = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\\n    .to_graph(BuildTimeseriesToGraphHorizontalVisibilityStrategy().with_limit(2).get_strategy())\\\n    .draw()\n</pre> timegraph_natural_visibility_with_limit = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\     .to_graph(BuildTimeseriesToGraphHorizontalVisibilityStrategy().with_limit(2).get_strategy())\\     .draw()"},{"location":"tutorial/tutorial-ts2g-visibility-strategy/#natural-and-horizontal-visibility-graphs","title":"Natural and horizontal visibility graphs\u00b6","text":""},{"location":"tutorial/tutorial-ts2g-visibility-strategy/#natural-visibility-graph","title":"Natural visibility graph\u00b6","text":"<p>The natural visibility graph (NVG) is based on the idea that each observation of the time series is seen as a vertical bar with height equal to the numerical value of the observation and that these vertical bars are laid in a landscape, the top of a bar is visible from the tops of other bars. Each node in the graph corresponds to a time stamp t of the time series, so the nodes are serially ordered. Two nodes are connected if there is a line of visibility between the corresponding data bars that is not intercepted.</p> <p>(Silva, Vanessa Freitas, et al. \"Time series analysis via network science: Concepts and algorithms.\" Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery 11.3 (2021): e1404.)</p>"},{"location":"tutorial/tutorial-ts2g-visibility-strategy/#horizontal-visibility-graph","title":"Horizontal visibility graph\u00b6","text":"<p>A simplified NVG method called the horizontal visibility graph inherits all natural visibility graph characteristics. The construction of horizontal visibility graphs differs from  that of natural visibility graphs in that the visibility lines are only horizontal:</p> <p>(Silva, Vanessa Freitas, et al. \"Time series analysis via network science: Concepts and algorithms.\" Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery 11.3 (2021): e1404.)</p>"},{"location":"tutorial/tutorial-ts2g-visibility-strategy/#additional-visibility-constraints","title":"Additional visibility constraints\u00b6","text":"<p>Along with natural and horizontal visibility strategy we can further constrain the connection of nodes with angle visibility contraint and limit algorithm.</p>"},{"location":"tutorial/tutorial-ts2g-visibility-strategy/#angle-visibility-constraint","title":"Angle visibility constraint\u00b6","text":"<p>This strategy only allows the connection between nodes, if they are positioned from each other under the specified angle.</p>"},{"location":"tutorial/tutorial-ts2g-visibility-strategy/#limit-algorithm","title":"limit algorithm\u00b6","text":"<p>This constraint tells the strategy, how many of the interruptions can be ignored, so that two nodes can be connected. If limit is 1, and we have natural visibility graph, we connect all the nodes, that cannot be seen between each other beacouse of one value between them.</p>"},{"location":"tutorial/tutorial-ts2g2-compact/","title":"Demo: sequences &lt;-&gt; networks","text":"In\u00a0[33]: Copied! <pre># enable automatic reloading of the notebook\n%load_ext autoreload\n%autoreload 2\n</pre> # enable automatic reloading of the notebook %load_ext autoreload %autoreload 2 <pre>The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n</pre> In\u00a0[34]: Copied! <pre>import os\nimport sys\nnb_dir = os.path.split(os.getcwd())[0]\nif nb_dir not in sys.path:\n    sys.path.append(nb_dir)\n\nfrom core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingSlidingWindow, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph, ToSequenceVisitorSlidingWindow, ToSequenceVisitor, ToSequenceVisitorOrdinalPartition\nfrom tsg_io.input import CsvFile\nfrom from_graph.strategy_to_time_sequence import StrategyNextValueInNodeRandom, StrategyNextValueInNodeRandomForSlidingWindow, StrategyNextValueInNodeRoundRobin, StrategyNextValueInNodeRoundRobinForSlidingWindow, StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs, StrategySelectNextNodeRandomlyFromNeighboursFromFirstGraph, StrategySelectNextNodeRandomly, StrategySelectNextNodeRandomDegree, StrategySelectNextNodeRandomWithRestart, StrategyNextValueInNodeOrdinalPartition\nfrom to_graph.strategy_linking_graph import StrategyLinkingGraphByValueWithinRange, LinkNodesWithinGraph\nfrom to_graph.strategy_linking_multi_graphs import LinkGraphs\nfrom to_graph.strategy_to_graph import BuildTimeseriesToGraphNaturalVisibilityStrategy, BuildTimeseriesToGraphHorizontalVisibilityStrategy, BuildTimeseriesToGraphOrdinalPartition, BuildTimeseriesToGraphQuantile\nimport warnings\nwarnings.filterwarnings('ignore')\n</pre> import os import sys nb_dir = os.path.split(os.getcwd())[0] if nb_dir not in sys.path:     sys.path.append(nb_dir)  from core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingSlidingWindow, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph, ToSequenceVisitorSlidingWindow, ToSequenceVisitor, ToSequenceVisitorOrdinalPartition from tsg_io.input import CsvFile from from_graph.strategy_to_time_sequence import StrategyNextValueInNodeRandom, StrategyNextValueInNodeRandomForSlidingWindow, StrategyNextValueInNodeRoundRobin, StrategyNextValueInNodeRoundRobinForSlidingWindow, StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs, StrategySelectNextNodeRandomlyFromNeighboursFromFirstGraph, StrategySelectNextNodeRandomly, StrategySelectNextNodeRandomDegree, StrategySelectNextNodeRandomWithRestart, StrategyNextValueInNodeOrdinalPartition from to_graph.strategy_linking_graph import StrategyLinkingGraphByValueWithinRange, LinkNodesWithinGraph from to_graph.strategy_linking_multi_graphs import LinkGraphs from to_graph.strategy_to_graph import BuildTimeseriesToGraphNaturalVisibilityStrategy, BuildTimeseriesToGraphHorizontalVisibilityStrategy, BuildTimeseriesToGraphOrdinalPartition, BuildTimeseriesToGraphQuantile import warnings warnings.filterwarnings('ignore') In\u00a0[35]: Copied! <pre>amazon_path = os.path.join(os.getcwd(), \"amazon\", \"AMZN.csv\")\napple_path = os.path.join(os.getcwd(), \"apple\", \"APPLE.csv\")\n</pre> amazon_path = os.path.join(os.getcwd(), \"amazon\", \"AMZN.csv\") apple_path = os.path.join(os.getcwd(), \"apple\", \"APPLE.csv\") In\u00a0[36]: Copied! <pre>timegraph_1 = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\\n    .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().with_limit(1).get_strategy())\\\n    .add_edge(0,2)\\\n    .add_edge(13, 21, weight = 17)\\\n    .link(LinkNodesWithinGraph().by_value(StrategyLinkingGraphByValueWithinRange(2)).seasonalities(15))\\\n    .draw()\n</pre> timegraph_1 = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\     .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().with_limit(1).get_strategy())\\     .add_edge(0,2)\\     .add_edge(13, 21, weight = 17)\\     .link(LinkNodesWithinGraph().by_value(StrategyLinkingGraphByValueWithinRange(2)).seasonalities(15))\\     .draw()  In\u00a0[37]: Copied! <pre>timegraph_2 = Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingComposite()\\\n        .add(TimeseriesPreprocessingSegmentation(60, 120))\\\n        .add(TimeseriesPreprocessingSlidingWindow(5)))\\\n    .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().get_strategy())\\\n    .link(LinkGraphs().sliding_window())\\\n    .combine_identical_subgraphs()\\\n    .draw()\n</pre> timegraph_2 = Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingComposite()\\         .add(TimeseriesPreprocessingSegmentation(60, 120))\\         .add(TimeseriesPreprocessingSlidingWindow(5)))\\     .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().get_strategy())\\     .link(LinkGraphs().sliding_window())\\     .combine_identical_subgraphs()\\     .draw() In\u00a0[38]: Copied! <pre>timegraph_3 = Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\\n    .add(Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(90, 120)))\\\n    .add(Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(150, 180)))\\\n    .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().with_limit(1).get_strategy())\\\n    .link(LinkGraphs().time_cooccurrence())\\\n    .link(LinkNodesWithinGraph().by_value(StrategyLinkingGraphByValueWithinRange(0.5)))\\\n    .combine_identical_nodes()\\\n    .draw()\n</pre> timegraph_3 = Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\     .add(Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(90, 120)))\\     .add(Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(150, 180)))\\     .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().with_limit(1).get_strategy())\\     .link(LinkGraphs().time_cooccurrence())\\     .link(LinkNodesWithinGraph().by_value(StrategyLinkingGraphByValueWithinRange(0.5)))\\     .combine_identical_nodes()\\     .draw() In\u00a0[39]: Copied! <pre>timegraph_4 = Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingComposite()\\\n        .add(TimeseriesPreprocessingSegmentation(60, 110))\\\n        .add(TimeseriesPreprocessingSlidingWindow(5)))\\\n    .add(Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingComposite()\\\n            .add(TimeseriesPreprocessingSegmentation(120, 170))\\\n            .add(TimeseriesPreprocessingSlidingWindow(5)))\\\n        .add(Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\\n            .with_preprocessing(TimeseriesPreprocessingComposite()\\\n                    .add(TimeseriesPreprocessingSegmentation(190, 240))\\\n                    .add(TimeseriesPreprocessingSlidingWindow(5)))))\\\n    .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().get_strategy())\\\n    .link(LinkGraphs().sliding_window().time_cooccurrence())\\\n    .combine_identical_subgraphs()\\\n    .link(LinkNodesWithinGraph().seasonalities(15))\\\n    .draw()\n</pre> timegraph_4 = Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingComposite()\\         .add(TimeseriesPreprocessingSegmentation(60, 110))\\         .add(TimeseriesPreprocessingSlidingWindow(5)))\\     .add(Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingComposite()\\             .add(TimeseriesPreprocessingSegmentation(120, 170))\\             .add(TimeseriesPreprocessingSlidingWindow(5)))\\         .add(Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\             .with_preprocessing(TimeseriesPreprocessingComposite()\\                     .add(TimeseriesPreprocessingSegmentation(190, 240))\\                     .add(TimeseriesPreprocessingSlidingWindow(5)))))\\     .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().get_strategy())\\     .link(LinkGraphs().sliding_window().time_cooccurrence())\\     .combine_identical_subgraphs()\\     .link(LinkNodesWithinGraph().seasonalities(15))\\     .draw() In\u00a0[40]: Copied! <pre>timegraph_5 = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 120))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(120, 180)))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(500, 560)))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(700, 760)))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(1000, 1060)))\\\n    .to_histogram(15)\\\n    .to_graph(BuildTimeseriesToGraphOrdinalPartition(10, 5).get_strategy())\\\n    .link(LinkGraphs().time_cooccurrence())\\\n    .add_edge(0,2)\\\n    .link(LinkNodesWithinGraph().seasonalities(4))\\\n    .draw()\n</pre> timegraph_5 = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 120))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(120, 180)))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(500, 560)))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(700, 760)))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(1000, 1060)))\\     .to_histogram(15)\\     .to_graph(BuildTimeseriesToGraphOrdinalPartition(10, 5).get_strategy())\\     .link(LinkGraphs().time_cooccurrence())\\     .add_edge(0,2)\\     .link(LinkNodesWithinGraph().seasonalities(4))\\     .draw() In\u00a0[41]: Copied! <pre>timegraph_6 = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 120))\\\n    .to_graph(BuildTimeseriesToGraphQuantile(4, 1).get_strategy())\\\n    .add_edge(0,2)\\\n    .link(LinkNodesWithinGraph().seasonalities(4))\\\n    .draw()\n</pre> timegraph_6 = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 120))\\     .to_graph(BuildTimeseriesToGraphQuantile(4, 1).get_strategy())\\     .add_edge(0,2)\\     .link(LinkNodesWithinGraph().seasonalities(4))\\     .draw() In\u00a0[42]: Copied! <pre>timegraph_dtw = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(90, 130)))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(130, 200)))\\\n    .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().with_limit(1).get_strategy())\\\n    .link(LinkGraphs().dynamic_timewarping())\\\n    .draw()\n</pre> timegraph_dtw = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(90, 130)))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(130, 200)))\\     .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().with_limit(1).get_strategy())\\     .link(LinkGraphs().dynamic_timewarping())\\     .draw() In\u00a0[43]: Copied! <pre>timegraph_1.to_sequence(ToSequenceVisitor()\\\n        .next_node_strategy(StrategySelectNextNodeRandomDegree())\\\n        .next_value_strategy(StrategyNextValueInNodeRoundRobin().skip_every_x_steps(1))\\\n        .ts_length(100))\\\n    .draw_sequence()\n</pre> timegraph_1.to_sequence(ToSequenceVisitor()\\         .next_node_strategy(StrategySelectNextNodeRandomDegree())\\         .next_value_strategy(StrategyNextValueInNodeRoundRobin().skip_every_x_steps(1))\\         .ts_length(100))\\     .draw_sequence() Out[43]: <pre>&lt;core.model.TimeGraph at 0x260506f9700&gt;</pre> In\u00a0[44]: Copied! <pre>timegraph_2.to_sequence(ToSequenceVisitorSlidingWindow()\\\n    .next_node_strategy(StrategySelectNextNodeRandomly())\\\n    .next_value_strategy(StrategyNextValueInNodeRandomForSlidingWindow().skip_every_x_steps(1))\\\n    .ts_length(50))\\\n    .draw_sequence()\n</pre> timegraph_2.to_sequence(ToSequenceVisitorSlidingWindow()\\     .next_node_strategy(StrategySelectNextNodeRandomly())\\     .next_value_strategy(StrategyNextValueInNodeRandomForSlidingWindow().skip_every_x_steps(1))\\     .ts_length(50))\\     .draw_sequence() Out[44]: <pre>&lt;core.model.TimeGraph at 0x26050348a40&gt;</pre> <p>We can also convert our multivriate graphs back to multiple time series.</p> In\u00a0[45]: Copied! <pre>timegraph_3.to_sequence(ToSequenceVisitor()\\\n    .next_node_strategy(StrategySelectNextNodeRandomWithRestart().change_graphs_every_x_steps(2))\\\n    .next_value_strategy(StrategyNextValueInNodeRoundRobin().skip_every_x_steps(1))\\\n    .ts_length(50))\\\n    .draw_sequence()\n</pre> timegraph_3.to_sequence(ToSequenceVisitor()\\     .next_node_strategy(StrategySelectNextNodeRandomWithRestart().change_graphs_every_x_steps(2))\\     .next_value_strategy(StrategyNextValueInNodeRoundRobin().skip_every_x_steps(1))\\     .ts_length(50))\\     .draw_sequence() Out[45]: <pre>&lt;core.model.TimeGraph at 0x26050e59460&gt;</pre> In\u00a0[46]: Copied! <pre>timegraph_4.to_sequence(ToSequenceVisitorSlidingWindow()\\\n    .next_node_strategy(StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs())\\\n    .next_value_strategy(StrategyNextValueInNodeRoundRobinForSlidingWindow())\\\n    .ts_length(100))\\\n    .draw_sequence()\n</pre> timegraph_4.to_sequence(ToSequenceVisitorSlidingWindow()\\     .next_node_strategy(StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs())\\     .next_value_strategy(StrategyNextValueInNodeRoundRobinForSlidingWindow())\\     .ts_length(100))\\     .draw_sequence() Out[46]: <pre>&lt;core.model.TimeGraph at 0x26050f38f20&gt;</pre> In\u00a0[47]: Copied! <pre>timegraph_5.to_sequence(ToSequenceVisitorOrdinalPartition()\\\n    .next_node_strategy(StrategySelectNextNodeRandomWithRestart())\\\n    .next_value_strategy(StrategyNextValueInNodeOrdinalPartition())\\\n    .ts_length(100))\\\n    .draw_sequence()\n</pre> timegraph_5.to_sequence(ToSequenceVisitorOrdinalPartition()\\     .next_node_strategy(StrategySelectNextNodeRandomWithRestart())\\     .next_value_strategy(StrategyNextValueInNodeOrdinalPartition())\\     .ts_length(100))\\     .draw_sequence() Out[47]: <pre>&lt;core.model.TimeGraph at 0x26050388e30&gt;</pre> In\u00a0[48]: Copied! <pre>timegraph_dtw.to_sequence(ToSequenceVisitor()\\\n    .next_node_strategy(StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs())\\\n    .next_value_strategy(StrategyNextValueInNodeRandom())\\\n    .ts_length(100))\\\n    .draw_sequence()\n</pre> timegraph_dtw.to_sequence(ToSequenceVisitor()\\     .next_node_strategy(StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs())\\     .next_value_strategy(StrategyNextValueInNodeRandom())\\     .ts_length(100))\\     .draw_sequence() Out[48]: <pre>&lt;core.model.TimeGraph at 0x26051002b40&gt;</pre>"},{"location":"tutorial/tutorial-ts2g2-compact/#demo-sequences-networks","title":"Demo: sequences &lt;-&gt; networks\u00b6","text":"<p>The following notebook provides a demonstration how the ts2g2 library can be used to convert time series into graphs and graphs into time series. To that end, we use a dataset with the history of daily prices of Amazon stock (AMZN) and Apple stock (APPLE). All the column desinpiptions are provided. Currency is USD.</p>"},{"location":"tutorial/tutorial-ts2g2-compact/#accessing-data","title":"Accessing data\u00b6","text":"<p>We first get path to the data.</p>"},{"location":"tutorial/tutorial-ts2g2-compact/#converting-time-series-to-graph","title":"Converting time series to graph\u00b6","text":"<p>Here are two examples of conversion of data from time serie to graph. Second one is inpeated using sliding window mechanism. That means its nodes are smaller graphs inpeated based on a segments of data (length = 5).</p>"},{"location":"tutorial/tutorial-ts2g2-compact/#combining-multiple-graphs","title":"Combining multiple graphs\u00b6","text":"<p>We can store and combine multiple of already inpeated objects TimeSeriesToGraph into one object MultivariateTimeSeriesToGraph</p>"},{"location":"tutorial/tutorial-ts2g2-compact/#back-to-time-series","title":"Back to time series\u00b6","text":"<p>We can convert existing graphs back to time series based on our strategy.</p>"},{"location":"tutorial/tutorial-ts2g2-embeddings/","title":"Tutorial: creating and comparing graph and timeseries embeddings","text":"In\u00a0[1]: Copied! <pre># enable automatic reloading of the notebook\n%load_ext autoreload\n%autoreload 2\n</pre> # enable automatic reloading of the notebook %load_ext autoreload %autoreload 2 In\u00a0[2]: Copied! <pre>import os\nimport sys\nnb_dir = os.path.split(os.getcwd())[0]\nif nb_dir not in sys.path:\n    sys.path.append(nb_dir)\n\n\nfrom core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingSlidingWindow, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph, ToSequenceVisitorSlidingWindow, ToSequenceVisitor, ToSequenceVisitorOrdinalPartition\nfrom tsg_io.input import CsvFile, TsFile\nfrom from_graph.strategy_to_time_sequence import StrategyNextValueInNodeRandom, StrategyNextValueInNodeRandomForSlidingWindow, StrategyNextValueInNodeRoundRobin, StrategyNextValueInNodeRoundRobinForSlidingWindow, StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs, StrategySelectNextNodeRandomlyFromNeighboursFromFirstGraph, StrategySelectNextNodeRandomly, StrategySelectNextNodeRandomDegree, StrategySelectNextNodeRandomWithRestart, StrategyNextValueInNodeOrdinalPartition\nfrom to_graph.strategy_linking_graph import StrategyLinkingGraphByValueWithinRange, LinkNodesWithinGraph\nfrom to_graph.strategy_linking_multi_graphs import LinkGraphs\nfrom to_graph.strategy_to_graph import BuildTimeseriesToGraphNaturalVisibilityStrategy, BuildTimeseriesToGraphHorizontalVisibilityStrategy, BuildTimeseriesToGraphOrdinalPartition, BuildTimeseriesToGraphQuantile\nfrom embeddings.ts2g2_embeddings import EmbeddingRanking, VisitorGraphEmbeddingModelDoc2Vec, VisitorTimeseriesEmbeddingModelTS2Vec\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')\n</pre> import os import sys nb_dir = os.path.split(os.getcwd())[0] if nb_dir not in sys.path:     sys.path.append(nb_dir)   from core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingSlidingWindow, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph, ToSequenceVisitorSlidingWindow, ToSequenceVisitor, ToSequenceVisitorOrdinalPartition from tsg_io.input import CsvFile, TsFile from from_graph.strategy_to_time_sequence import StrategyNextValueInNodeRandom, StrategyNextValueInNodeRandomForSlidingWindow, StrategyNextValueInNodeRoundRobin, StrategyNextValueInNodeRoundRobinForSlidingWindow, StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs, StrategySelectNextNodeRandomlyFromNeighboursFromFirstGraph, StrategySelectNextNodeRandomly, StrategySelectNextNodeRandomDegree, StrategySelectNextNodeRandomWithRestart, StrategyNextValueInNodeOrdinalPartition from to_graph.strategy_linking_graph import StrategyLinkingGraphByValueWithinRange, LinkNodesWithinGraph from to_graph.strategy_linking_multi_graphs import LinkGraphs from to_graph.strategy_to_graph import BuildTimeseriesToGraphNaturalVisibilityStrategy, BuildTimeseriesToGraphHorizontalVisibilityStrategy, BuildTimeseriesToGraphOrdinalPartition, BuildTimeseriesToGraphQuantile from embeddings.ts2g2_embeddings import EmbeddingRanking, VisitorGraphEmbeddingModelDoc2Vec, VisitorTimeseriesEmbeddingModelTS2Vec import pandas as pd import warnings warnings.filterwarnings('ignore') In\u00a0[3]: Copied! <pre>apple_path = os.path.join(os.getcwd(), \"apple\", \"APPLE.csv\")\npath = CsvFile(apple_path, \"Close\").from_csv()\n</pre> apple_path = os.path.join(os.getcwd(), \"apple\", \"APPLE.csv\") path = CsvFile(apple_path, \"Close\").from_csv() In\u00a0[4]: Copied! <pre>timegraph_natural_visibility = Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\\n    .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().with_limit(1).get_strategy())\\\n    .add_edge(0,2)\\\n    .add_edge(13, 21, weight = 17)\\\n    .link(LinkNodesWithinGraph().by_value(StrategyLinkingGraphByValueWithinRange(2)).seasonalities(15))\\\n    .draw()\n\ntimegraph_ordinal_partition = Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 120))\\\n    .add(Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\\n        .with_preprocessing(TimeseriesPreprocessingSegmentation(120, 180)))\\\n    .to_histogram(15)\\\n    .to_graph(BuildTimeseriesToGraphOrdinalPartition(10, 5).get_strategy())\\\n    .link(LinkGraphs().time_cooccurrence())\\\n    .draw()\n</pre> timegraph_natural_visibility = Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 90))\\     .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().with_limit(1).get_strategy())\\     .add_edge(0,2)\\     .add_edge(13, 21, weight = 17)\\     .link(LinkNodesWithinGraph().by_value(StrategyLinkingGraphByValueWithinRange(2)).seasonalities(15))\\     .draw()  timegraph_ordinal_partition = Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(60, 120))\\     .add(Timeseries(CsvFile(apple_path, \"Close\").from_csv())\\         .with_preprocessing(TimeseriesPreprocessingSegmentation(120, 180)))\\     .to_histogram(15)\\     .to_graph(BuildTimeseriesToGraphOrdinalPartition(10, 5).get_strategy())\\     .link(LinkGraphs().time_cooccurrence())\\     .draw() <p>Then we set parameters and train models for creating embeddings.</p> In\u00a0[5]: Copied! <pre>apple_path = os.path.join(os.getcwd(), \"apple\", \"APPLE.csv\")\npath = CsvFile(apple_path, \"Close\").from_csv()\nembedding_size = 20\n\n# to train graph embedding model, we need to provide multiple graphs. We chose arbitrary two as an example.\nmodel_graph = VisitorGraphEmbeddingModelDoc2Vec().train_model([timegraph_natural_visibility, timegraph_ordinal_partition], embedding_size)\nmodel_ts = VisitorTimeseriesEmbeddingModelTS2Vec().train_model(path, embedding_size, epoch=20)\n\n# VisitorTimeseriesEmbeddingModelTS2Vec model was made with the help of TS2Vec library (available on: https://github.com/zhihanyue/ts2vec.git; version: b0088e14a99706c05451316dc6db8d3da9351163)\n</pre> apple_path = os.path.join(os.getcwd(), \"apple\", \"APPLE.csv\") path = CsvFile(apple_path, \"Close\").from_csv() embedding_size = 20  # to train graph embedding model, we need to provide multiple graphs. We chose arbitrary two as an example. model_graph = VisitorGraphEmbeddingModelDoc2Vec().train_model([timegraph_natural_visibility, timegraph_ordinal_partition], embedding_size) model_ts = VisitorTimeseriesEmbeddingModelTS2Vec().train_model(path, embedding_size, epoch=20)  # VisitorTimeseriesEmbeddingModelTS2Vec model was made with the help of TS2Vec library (available on: https://github.com/zhihanyue/ts2vec.git; version: b0088e14a99706c05451316dc6db8d3da9351163)   <pre>Epoch #0: loss=2.157383441925049\nEpoch #1: loss=1.5637575387954712\nEpoch #2: loss=1.766700267791748\nEpoch #3: loss=1.7162991762161255\nEpoch #4: loss=2.081728458404541\nEpoch #5: loss=1.465295433998108\nEpoch #6: loss=2.100123882293701\nEpoch #7: loss=2.0829761028289795\nEpoch #8: loss=1.8936793804168701\nEpoch #9: loss=1.871886968612671\nEpoch #10: loss=2.059738874435425\nEpoch #11: loss=1.667407512664795\nEpoch #12: loss=1.8802294731140137\nEpoch #13: loss=1.8239470720291138\nEpoch #14: loss=1.7728564739227295\nEpoch #15: loss=1.8554028272628784\nEpoch #16: loss=1.7092828750610352\nEpoch #17: loss=1.7523998022079468\nEpoch #18: loss=1.1741472482681274\nEpoch #19: loss=1.9522279500961304\n</pre> In\u00a0[6]: Copied! <pre>data = {'run':[], 'natural_visibility':[], 'horizontal_visibility':[], 'ordinal_partition':[], 'quantile':[]}\ni = 1\nwhile i &lt;= 5:\n    x = EmbeddingRanking(embedding_size)\\\n        .set_embedding_models(model_ts, model_graph)\\\n        .set_to_graph_strategies([BuildTimeseriesToGraphNaturalVisibilityStrategy(), BuildTimeseriesToGraphHorizontalVisibilityStrategy(), BuildTimeseriesToGraphOrdinalPartition(10, 5), BuildTimeseriesToGraphQuantile(4, 1)])\\\n        .add_timeseries(Timeseries(path).with_preprocessing(TimeseriesPreprocessingSegmentation(100, 200)))\\\n        .add_timeseries(Timeseries(path).with_preprocessing(TimeseriesPreprocessingSegmentation(300, 400)))\\\n        .embedding_ranking()\\\n        .kendall_tau_correlation()\n    data['run'].append(i)\n    i+=1\n    data['natural_visibility'].append(x[0])\n    data[\"horizontal_visibility\"].append(x[1])\n    data[\"ordinal_partition\"].append(x[2])\n    data[\"quantile\"].append(x[3])\n\ndf = pd.DataFrame.from_dict(data)\naverage_values = df.mean()\nprint(average_values)\n</pre> data = {'run':[], 'natural_visibility':[], 'horizontal_visibility':[], 'ordinal_partition':[], 'quantile':[]} i = 1 while i &lt;= 5:     x = EmbeddingRanking(embedding_size)\\         .set_embedding_models(model_ts, model_graph)\\         .set_to_graph_strategies([BuildTimeseriesToGraphNaturalVisibilityStrategy(), BuildTimeseriesToGraphHorizontalVisibilityStrategy(), BuildTimeseriesToGraphOrdinalPartition(10, 5), BuildTimeseriesToGraphQuantile(4, 1)])\\         .add_timeseries(Timeseries(path).with_preprocessing(TimeseriesPreprocessingSegmentation(100, 200)))\\         .add_timeseries(Timeseries(path).with_preprocessing(TimeseriesPreprocessingSegmentation(300, 400)))\\         .embedding_ranking()\\         .kendall_tau_correlation()     data['run'].append(i)     i+=1     data['natural_visibility'].append(x[0])     data[\"horizontal_visibility\"].append(x[1])     data[\"ordinal_partition\"].append(x[2])     data[\"quantile\"].append(x[3])  df = pd.DataFrame.from_dict(data) average_values = df.mean() print(average_values) <pre>run                      3.0\nnatural_visibility      -0.2\nhorizontal_visibility   -0.2\nordinal_partition       -0.2\nquantile                -0.6\ndtype: float64\n</pre>"},{"location":"tutorial/tutorial-ts2g2-embeddings/#tutorial-creating-and-comparing-graph-and-timeseries-embeddings","title":"Tutorial: creating and comparing graph and timeseries embeddings\u00b6","text":"<p>The following notebook provides a demonstration how to create and compare embeddings from a timeseries and graphs created from this timeseries with different methods.</p>"},{"location":"tutorial/tutorial-ts2g2-embeddings/#accessing-data","title":"Accessing data\u00b6","text":"<p>We first get path to the data.</p>"},{"location":"tutorial/tutorial-ts2g2-embeddings/#comparing-embeddings","title":"Comparing embeddings\u00b6","text":"<p>Now that we have set the parametersand trained our models, we can create and compare embeddings. Firstly, we need to create EmbeddingRanking object and give it models and strategies for timeseries to graph conversion, we want to compare. Then we add as many of the timeseries segments as we want and rank them. Because graph embeddings are created using random walk, we repeat this process multiple times and then calculate the average score.</p>"},{"location":"tutorial/tutorial-ts2g2-overview/","title":"Tutorial: Overview","text":"In\u00a0[1]: Copied! <pre># enable automatic reloading of the notebook\n%load_ext autoreload\n%autoreload 2\n</pre> # enable automatic reloading of the notebook %load_ext autoreload %autoreload 2 In\u00a0[2]: Copied! <pre>import os\nimport sys\nnb_dir = os.path.split(os.getcwd())[0]\nif nb_dir not in sys.path:\n    sys.path.append(nb_dir)\n\nimport matplotlib.pyplot as plt\nfrom core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingSlidingWindow, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph, ToSequenceVisitorSlidingWindow, ToSequenceVisitor, ToSequenceVisitorOrdinalPartition\nfrom tsg_io.input import CsvFile\nfrom from_graph.strategy_to_time_sequence import StrategyNextValueInNodeRandom, StrategyNextValueInNodeRandomForSlidingWindow, StrategyNextValueInNodeRoundRobin, StrategyNextValueInNodeRoundRobinForSlidingWindow, StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs, StrategySelectNextNodeRandomlyFromNeighboursFromFirstGraph, StrategySelectNextNodeRandomly, StrategySelectNextNodeRandomDegree, StrategySelectNextNodeRandomWithRestart, StrategyNextValueInNodeOrdinalPartition\nfrom to_graph.strategy_linking_graph import StrategyLinkingGraphByValueWithinRange, LinkNodesWithinGraph\nfrom to_graph.strategy_linking_multi_graphs import LinkGraphs\nfrom to_graph.strategy_to_graph import BuildTimeseriesToGraphNaturalVisibilityStrategy, BuildTimeseriesToGraphHorizontalVisibilityStrategy, BuildTimeseriesToGraphOrdinalPartition, BuildTimeseriesToGraphQuantile\nimport warnings\nwarnings.filterwarnings('ignore')\n</pre> import os import sys nb_dir = os.path.split(os.getcwd())[0] if nb_dir not in sys.path:     sys.path.append(nb_dir)  import matplotlib.pyplot as plt from core.model import Timeseries, TimeseriesPreprocessing, TimeseriesPreprocessingSegmentation, TimeseriesPreprocessingSlidingWindow, TimeseriesPreprocessingComposite, TimeseriesView, TimeGraph, ToSequenceVisitorSlidingWindow, ToSequenceVisitor, ToSequenceVisitorOrdinalPartition from tsg_io.input import CsvFile from from_graph.strategy_to_time_sequence import StrategyNextValueInNodeRandom, StrategyNextValueInNodeRandomForSlidingWindow, StrategyNextValueInNodeRoundRobin, StrategyNextValueInNodeRoundRobinForSlidingWindow, StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs, StrategySelectNextNodeRandomlyFromNeighboursFromFirstGraph, StrategySelectNextNodeRandomly, StrategySelectNextNodeRandomDegree, StrategySelectNextNodeRandomWithRestart, StrategyNextValueInNodeOrdinalPartition from to_graph.strategy_linking_graph import StrategyLinkingGraphByValueWithinRange, LinkNodesWithinGraph from to_graph.strategy_linking_multi_graphs import LinkGraphs from to_graph.strategy_to_graph import BuildTimeseriesToGraphNaturalVisibilityStrategy, BuildTimeseriesToGraphHorizontalVisibilityStrategy, BuildTimeseriesToGraphOrdinalPartition, BuildTimeseriesToGraphQuantile import warnings warnings.filterwarnings('ignore') In\u00a0[3]: Copied! <pre>amazon_path = os.path.join(os.getcwd(), \"amazon\", \"AMZN.csv\")\napple_path = os.path.join(os.getcwd(), \"apple\", \"APPLE.csv\")\n</pre> amazon_path = os.path.join(os.getcwd(), \"amazon\", \"AMZN.csv\") apple_path = os.path.join(os.getcwd(), \"apple\", \"APPLE.csv\")  In\u00a0[4]: Copied! <pre>def plot_timeseries(sequence, title, x_legend, y_legend, color = \"black\"):\n    plt.figure(figsize=(10, 6))\n    plt.plot(sequence, linestyle='-', color=color)\n    \n    plt.title(title)\n    plt.xlabel(x_legend)\n    plt.ylabel(y_legend)\n    plt.grid(True)\n    plt.show()\n</pre> def plot_timeseries(sequence, title, x_legend, y_legend, color = \"black\"):     plt.figure(figsize=(10, 6))     plt.plot(sequence, linestyle='-', color=color)          plt.title(title)     plt.xlabel(x_legend)     plt.ylabel(y_legend)     plt.grid(True)     plt.show() In\u00a0[5]: Copied! <pre>plot_timeseries(CsvFile(amazon_path, \"Close\").from_csv(), \"Original Sequence\", \"Year\", \"Value\")\n</pre> plot_timeseries(CsvFile(amazon_path, \"Close\").from_csv(), \"Original Sequence\", \"Year\", \"Value\") <p>For easier presentation and understanding we will only analyze a segment of this timeseries.</p> In\u00a0[6]: Copied! <pre>plot_timeseries(CsvFile(amazon_path, \"Close\").from_csv()[100:200], \"Segment\", \"Year\", \"Value\", color=\"blue\")\n</pre> plot_timeseries(CsvFile(amazon_path, \"Close\").from_csv()[100:200], \"Segment\", \"Year\", \"Value\", color=\"blue\") In\u00a0[7]: Copied! <pre>timegraph = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(100, 200))\\\n    .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().get_strategy())\\\n    .draw()\n</pre> timegraph = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(100, 200))\\     .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().get_strategy())\\     .draw() <p>If we have multiple segments of timeseries, we can turn them into one connected graph, based on given strategy:</p> In\u00a0[8]: Copied! <pre>multivariate_timegraph = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n    .with_preprocessing(TimeseriesPreprocessingSegmentation(100, 200))\\\n    .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\\n         .with_preprocessing(TimeseriesPreprocessingSegmentation(200, 300)))\\\n    .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().get_strategy())\\\n    .link(LinkGraphs().time_cooccurrence())\\\n    .draw()\n</pre> multivariate_timegraph = Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\     .with_preprocessing(TimeseriesPreprocessingSegmentation(100, 200))\\     .add(Timeseries(CsvFile(amazon_path, \"Close\").from_csv())\\          .with_preprocessing(TimeseriesPreprocessingSegmentation(200, 300)))\\     .to_graph(BuildTimeseriesToGraphNaturalVisibilityStrategy().get_strategy())\\     .link(LinkGraphs().time_cooccurrence())\\     .draw() <p>There are multiple of different methods of turning timeseries into graphs. So far we have implemented:</p> <ul> <li><p>Natural visibility strategy: ...</p> </li> <li><p>Horizontal visibility strategy: ...</p> </li> <li><p>Strategy using quantiles: ...</p> </li> <li><p>Ordinal partition strategy: ...</p> </li> <li><p>proximity network strategy: ...</p> </li> <li><p>timeseries correlation strategy: ...</p> </li> </ul> <p>Along with these strategies, we have constructed strategy, to turn timeseries into a</p> <ul> <li>sliding window graph: ...</li> </ul> <p>After we have turned our segment into a graph, we can furthrt supplement our graph with some methods like:</p> <ul> <li><p>add_edge(node_1, node_2, weight=None): adds edge between node_1 and node_2 with weight weight if it is not none.</p> </li> <li><p>link(link_strategy: LinkNodesWithinGraph): links nodes in graph based on a link_strategy object.</p> </li> <li><p>combine_identical_nodes(): combines nodes that have the same attributes.</p> </li> </ul> In\u00a0[9]: Copied! <pre>timegraph.to_sequence(ToSequenceVisitor()\\\n        .next_node_strategy(StrategySelectNextNodeRandomDegree())\\\n        .next_value_strategy(StrategyNextValueInNodeRoundRobin())\\\n        .ts_length(100))\\\n    .draw_sequence()\n</pre> timegraph.to_sequence(ToSequenceVisitor()\\         .next_node_strategy(StrategySelectNextNodeRandomDegree())\\         .next_value_strategy(StrategyNextValueInNodeRoundRobin())\\         .ts_length(100))\\     .draw_sequence() Out[9]: <pre>&lt;core.model.TimeGraph at 0x1339db07e60&gt;</pre> In\u00a0[10]: Copied! <pre>multivariate_timegraph.to_sequence(ToSequenceVisitor()\\\n        .next_node_strategy(StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs())\\\n        .next_value_strategy(StrategyNextValueInNodeRandom())\\\n        .ts_length(100))\\\n    .draw_sequence()\n</pre> multivariate_timegraph.to_sequence(ToSequenceVisitor()\\         .next_node_strategy(StrategySelectNextNodeRandomlyFromNeighboursAcrossGraphs())\\         .next_value_strategy(StrategyNextValueInNodeRandom())\\         .ts_length(100))\\     .draw_sequence() Out[10]: <pre>&lt;core.model.TimeGraph at 0x1339df80680&gt;</pre> <p>There are also many different ways of generating timeseries. You can take closer look at them here: ...</p> <p>A compact tutorial of different timeseries to graph and back methods along with some extra functions can be found here: ...</p>"},{"location":"tutorial/tutorial-ts2g2-overview/#tutorial-overview","title":"Tutorial: Overview\u00b6","text":"<p>This notebook provides a demonstration how the ts2g2 library can be used to convert time series into graphs and graphs into time series, with links to more detailed tutorials. To that end, we use a dataset with the history of daily prices of Amazon stock (AMZN) and Apple stock (APPLE). All the column descriptions are provided. Currency is USD.</p>"},{"location":"tutorial/tutorial-ts2g2-overview/#loading-data","title":"Loading data\u00b6","text":"<p>We first load the dataset :)</p>"},{"location":"tutorial/tutorial-ts2g2-overview/#univariate-graphs","title":"Univariate graphs\u00b6","text":"<p>We can now turn this segment of timeseries into a univariate graph:</p>"},{"location":"tutorial/tutorial-ts2g2-overview/#multivariate-graphs","title":"Multivariate graphs\u00b6","text":""},{"location":"tutorial/tutorial-ts2g2-overview/#about-graphs","title":"About graphs\u00b6","text":""},{"location":"tutorial/tutorial-ts2g2-overview/#to-timeseries","title":"To timeseries\u00b6","text":"<p>When we have our graph, we can also generate a timeseries from it.</p>"},{"location":"tutorial/tutorial-ts2g2-overview/#timeseries-and-graph-embeddings","title":"Timeseries and graph embeddings\u00b6","text":"<p>We can compare different graphs and timeseries among each other by creating and calculating distance between their embeddings. You can take a closer look how this is done here: ...</p>"}]}